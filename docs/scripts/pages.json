[{"name":"fun <Error class: unknown class>.adjustReputation(repChangeWithFaction: Float, limit: <Error class: unknown class>?, factionId: String?, repChangeWithPerson: Float, personLimit: <Error class: unknown class>?, person: <Error class: unknown class>?): <Error class: unknown class>","description":"org.magiclib.kotlin.adjustReputation","location":"magiclib/org.magiclib.kotlin/adjust-reputation.html","searchKeys":["adjustReputation","fun <Error class: unknown class>.adjustReputation(repChangeWithFaction: Float, limit: <Error class: unknown class>?, factionId: String?, repChangeWithPerson: Float, personLimit: <Error class: unknown class>?, person: <Error class: unknown class>?): <Error class: unknown class>","org.magiclib.kotlin.adjustReputation"]},{"name":"fun <Error class: unknown class>.toLongList(): List<Long>","description":"org.magiclib.kotlin.toLongList","location":"magiclib/org.magiclib.kotlin/to-long-list.html","searchKeys":["toLongList","fun <Error class: unknown class>.toLongList(): List<Long>","org.magiclib.kotlin.toLongList"]},{"name":"fun <Error class: unknown class>.toStringList(): List<String>","description":"org.magiclib.kotlin.toStringList","location":"magiclib/org.magiclib.kotlin/to-string-list.html","searchKeys":["toStringList","fun <Error class: unknown class>.toStringList(): List<String>","org.magiclib.kotlin.toStringList"]},{"name":"fun <Error class: unknown class><Float>.random(): Float","description":"org.magiclib.kotlin.random","location":"magiclib/org.magiclib.kotlin/random.html","searchKeys":["random","fun <Error class: unknown class><Float>.random(): Float","org.magiclib.kotlin.random"]},{"name":"fun onGameLoad(newGame: Boolean)","description":"org.magiclib.kotlin.MagicKotlinModPlugin.onGameLoad","location":"magiclib/org.magiclib.kotlin/-magic-kotlin-mod-plugin/on-game-load.html","searchKeys":["onGameLoad","fun onGameLoad(newGame: Boolean)","org.magiclib.kotlin.MagicKotlinModPlugin.onGameLoad"]},{"name":"inline fun <Error class: unknown class>.addAbilityGainText(abilityId: String): <Error class: unknown class>","description":"org.magiclib.kotlin.addAbilityGainText","location":"magiclib/org.magiclib.kotlin/add-ability-gain-text.html","searchKeys":["addAbilityGainText","inline fun <Error class: unknown class>.addAbilityGainText(abilityId: String): <Error class: unknown class>","org.magiclib.kotlin.addAbilityGainText"]},{"name":"inline fun <Error class: unknown class>.addAdjustmentMessage(delta: Float, faction: <Error class: unknown class>?, person: <Error class: unknown class>?, message: <Error class: unknown class>? = null, info: <Error class: unknown class>? = null, textColor: Color, withCurrent: Boolean, padding: Float, reason: String? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.addAdjustmentMessage","location":"magiclib/org.magiclib.kotlin/add-adjustment-message.html","searchKeys":["addAdjustmentMessage","inline fun <Error class: unknown class>.addAdjustmentMessage(delta: Float, faction: <Error class: unknown class>?, person: <Error class: unknown class>?, message: <Error class: unknown class>? = null, info: <Error class: unknown class>? = null, textColor: Color, withCurrent: Boolean, padding: Float, reason: String? = null): <Error class: unknown class>","org.magiclib.kotlin.addAdjustmentMessage"]},{"name":"inline fun <Error class: unknown class>.addAdjustmentMessage(delta: Float, faction: <Error class: unknown class>?, person: <Error class: unknown class>?, message: <Error class: unknown class>? = null, panel: <Error class: unknown class>? = null, textColor: Color, withCurrent: Boolean, padding: Float, reason: String? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.addAdjustmentMessage","location":"magiclib/org.magiclib.kotlin/add-adjustment-message.html","searchKeys":["addAdjustmentMessage","inline fun <Error class: unknown class>.addAdjustmentMessage(delta: Float, faction: <Error class: unknown class>?, person: <Error class: unknown class>?, message: <Error class: unknown class>? = null, panel: <Error class: unknown class>? = null, textColor: Color, withCurrent: Boolean, padding: Float, reason: String? = null): <Error class: unknown class>","org.magiclib.kotlin.addAdjustmentMessage"]},{"name":"inline fun <Error class: unknown class>.addAdminGainText(admin: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.addAdminGainText","location":"magiclib/org.magiclib.kotlin/add-admin-gain-text.html","searchKeys":["addAdminGainText","inline fun <Error class: unknown class>.addAdminGainText(admin: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.addAdminGainText"]},{"name":"inline fun <Error class: unknown class>.addCRLossText(member: <Error class: unknown class>, crLoss: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.addCRLossText","location":"magiclib/org.magiclib.kotlin/add-c-r-loss-text.html","searchKeys":["addCRLossText","inline fun <Error class: unknown class>.addCRLossText(member: <Error class: unknown class>, crLoss: Float): <Error class: unknown class>","org.magiclib.kotlin.addCRLossText"]},{"name":"inline fun <Error class: unknown class>.addCommodityGainText(commodityId: String, quantity: Int): <Error class: unknown class>","description":"org.magiclib.kotlin.addCommodityGainText","location":"magiclib/org.magiclib.kotlin/add-commodity-gain-text.html","searchKeys":["addCommodityGainText","inline fun <Error class: unknown class>.addCommodityGainText(commodityId: String, quantity: Int): <Error class: unknown class>","org.magiclib.kotlin.addCommodityGainText"]},{"name":"inline fun <Error class: unknown class>.addCommodityLossText(commodityId: String, quantity: Int): <Error class: unknown class>","description":"org.magiclib.kotlin.addCommodityLossText","location":"magiclib/org.magiclib.kotlin/add-commodity-loss-text.html","searchKeys":["addCommodityLossText","inline fun <Error class: unknown class>.addCommodityLossText(commodityId: String, quantity: Int): <Error class: unknown class>","org.magiclib.kotlin.addCommodityLossText"]},{"name":"inline fun <Error class: unknown class>.addCreditsGainText(credits: Int): <Error class: unknown class>","description":"org.magiclib.kotlin.addCreditsGainText","location":"magiclib/org.magiclib.kotlin/add-credits-gain-text.html","searchKeys":["addCreditsGainText","inline fun <Error class: unknown class>.addCreditsGainText(credits: Int): <Error class: unknown class>","org.magiclib.kotlin.addCreditsGainText"]},{"name":"inline fun <Error class: unknown class>.addCreditsLossText(credits: Int): <Error class: unknown class>","description":"org.magiclib.kotlin.addCreditsLossText","location":"magiclib/org.magiclib.kotlin/add-credits-loss-text.html","searchKeys":["addCreditsLossText","inline fun <Error class: unknown class>.addCreditsLossText(credits: Int): <Error class: unknown class>","org.magiclib.kotlin.addCreditsLossText"]},{"name":"inline fun <Error class: unknown class>.addCurrentStanding(faction: <Error class: unknown class>?, person: <Error class: unknown class>?, info: <Error class: unknown class>? = null, textColor: Color, padding: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.addCurrentStanding","location":"magiclib/org.magiclib.kotlin/add-current-standing.html","searchKeys":["addCurrentStanding","inline fun <Error class: unknown class>.addCurrentStanding(faction: <Error class: unknown class>?, person: <Error class: unknown class>?, info: <Error class: unknown class>? = null, textColor: Color, padding: Float): <Error class: unknown class>","org.magiclib.kotlin.addCurrentStanding"]},{"name":"inline fun <Error class: unknown class>.addCurrentStanding(faction: <Error class: unknown class>?, person: <Error class: unknown class>?, panel: <Error class: unknown class>? = null, textColor: Color, padding: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.addCurrentStanding","location":"magiclib/org.magiclib.kotlin/add-current-standing.html","searchKeys":["addCurrentStanding","inline fun <Error class: unknown class>.addCurrentStanding(faction: <Error class: unknown class>?, person: <Error class: unknown class>?, panel: <Error class: unknown class>? = null, textColor: Color, padding: Float): <Error class: unknown class>","org.magiclib.kotlin.addCurrentStanding"]},{"name":"inline fun <Error class: unknown class>.addDebrisField(params: <Error class: unknown class>, random: Random?): <Error class: unknown class>","description":"org.magiclib.kotlin.addDebrisField","location":"magiclib/org.magiclib.kotlin/add-debris-field.html","searchKeys":["addDebrisField","inline fun <Error class: unknown class>.addDebrisField(params: <Error class: unknown class>, random: Random?): <Error class: unknown class>","org.magiclib.kotlin.addDebrisField"]},{"name":"inline fun <Error class: unknown class>.addDefeatTrigger(trigger: String): <Error class: unknown class>","description":"org.magiclib.kotlin.addDefeatTrigger","location":"magiclib/org.magiclib.kotlin/add-defeat-trigger.html","searchKeys":["addDefeatTrigger","inline fun <Error class: unknown class>.addDefeatTrigger(trigger: String): <Error class: unknown class>","org.magiclib.kotlin.addDefeatTrigger"]},{"name":"inline fun <Error class: unknown class>.addDeltaMessage(delta: Float, faction: <Error class: unknown class>?, person: <Error class: unknown class>?, info: <Error class: unknown class>?, textColor: Color?, withCurrent: Boolean, padding: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.addDeltaMessage","location":"magiclib/org.magiclib.kotlin/add-delta-message.html","searchKeys":["addDeltaMessage","inline fun <Error class: unknown class>.addDeltaMessage(delta: Float, faction: <Error class: unknown class>?, person: <Error class: unknown class>?, info: <Error class: unknown class>?, textColor: Color?, withCurrent: Boolean, padding: Float): <Error class: unknown class>","org.magiclib.kotlin.addDeltaMessage"]},{"name":"inline fun <Error class: unknown class>.addDeltaMessage(delta: Float, faction: <Error class: unknown class>?, person: <Error class: unknown class>?, panel: <Error class: unknown class>?, textColor: Color?, withCurrent: Boolean, padding: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.addDeltaMessage","location":"magiclib/org.magiclib.kotlin/add-delta-message.html","searchKeys":["addDeltaMessage","inline fun <Error class: unknown class>.addDeltaMessage(delta: Float, faction: <Error class: unknown class>?, person: <Error class: unknown class>?, panel: <Error class: unknown class>?, textColor: Color?, withCurrent: Boolean, padding: Float): <Error class: unknown class>","org.magiclib.kotlin.addDeltaMessage"]},{"name":"inline fun <Error class: unknown class>.addDesignTypePara(design: String, pad: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.addDesignTypePara","location":"magiclib/org.magiclib.kotlin/add-design-type-para.html","searchKeys":["addDesignTypePara","inline fun <Error class: unknown class>.addDesignTypePara(design: String, pad: Float): <Error class: unknown class>","org.magiclib.kotlin.addDesignTypePara"]},{"name":"inline fun <Error class: unknown class>.addFleetMemberGainText(member: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.addFleetMemberGainText","location":"magiclib/org.magiclib.kotlin/add-fleet-member-gain-text.html","searchKeys":["addFleetMemberGainText","inline fun <Error class: unknown class>.addFleetMemberGainText(member: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.addFleetMemberGainText"]},{"name":"inline fun <Error class: unknown class>.addFleetMemberGainText(variant: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.addFleetMemberGainText","location":"magiclib/org.magiclib.kotlin/add-fleet-member-gain-text.html","searchKeys":["addFleetMemberGainText","inline fun <Error class: unknown class>.addFleetMemberGainText(variant: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.addFleetMemberGainText"]},{"name":"inline fun <Error class: unknown class>.addFleetMemberLossText(member: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.addFleetMemberLossText","location":"magiclib/org.magiclib.kotlin/add-fleet-member-loss-text.html","searchKeys":["addFleetMemberLossText","inline fun <Error class: unknown class>.addFleetMemberLossText(member: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.addFleetMemberLossText"]},{"name":"inline fun <Error class: unknown class>.addGlowyParticle(loc: <Error class: unknown class>, vel: <Error class: unknown class>, size: Float, rampUp: Float, dur: Float, color: Color): <Error class: unknown class>","description":"org.magiclib.kotlin.addGlowyParticle","location":"magiclib/org.magiclib.kotlin/add-glowy-particle.html","searchKeys":["addGlowyParticle","inline fun <Error class: unknown class>.addGlowyParticle(loc: <Error class: unknown class>, vel: <Error class: unknown class>, size: Float, rampUp: Float, dur: Float, color: Color): <Error class: unknown class>","org.magiclib.kotlin.addGlowyParticle"]},{"name":"inline fun <Error class: unknown class>.addHitGlow(loc: <Error class: unknown class>, vel: <Error class: unknown class>, size: Float, dur: Float = 1f + Math.random().toFloat(), color: Color): <Error class: unknown class>","description":"org.magiclib.kotlin.addHitGlow","location":"magiclib/org.magiclib.kotlin/add-hit-glow.html","searchKeys":["addHitGlow","inline fun <Error class: unknown class>.addHitGlow(loc: <Error class: unknown class>, vel: <Error class: unknown class>, size: Float, dur: Float = 1f + Math.random().toFloat(), color: Color): <Error class: unknown class>","org.magiclib.kotlin.addHitGlow"]},{"name":"inline fun <Error class: unknown class>.addNebulaFromPNG(image: String, centerX: Float, centerY: Float, category: String, key: String, tilesWide: Int, tilesHigh: Int, terrainType: String = Terrain.NEBULA, age: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.addNebulaFromPNG","location":"magiclib/org.magiclib.kotlin/add-nebula-from-p-n-g.html","searchKeys":["addNebulaFromPNG","inline fun <Error class: unknown class>.addNebulaFromPNG(image: String, centerX: Float, centerY: Float, category: String, key: String, tilesWide: Int, tilesHigh: Int, terrainType: String = Terrain.NEBULA, age: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.addNebulaFromPNG"]},{"name":"inline fun <Error class: unknown class>.addNoChangeMessage(deltaSign: Float, faction: <Error class: unknown class>?, person: <Error class: unknown class>?, message: <Error class: unknown class>?, info: <Error class: unknown class>?, textColor: Color?, withCurrent: Boolean, padding: Float, reason: String? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.addNoChangeMessage","location":"magiclib/org.magiclib.kotlin/add-no-change-message.html","searchKeys":["addNoChangeMessage","inline fun <Error class: unknown class>.addNoChangeMessage(deltaSign: Float, faction: <Error class: unknown class>?, person: <Error class: unknown class>?, message: <Error class: unknown class>?, info: <Error class: unknown class>?, textColor: Color?, withCurrent: Boolean, padding: Float, reason: String? = null): <Error class: unknown class>","org.magiclib.kotlin.addNoChangeMessage"]},{"name":"inline fun <Error class: unknown class>.addNoChangeMessage(deltaSign: Float, faction: <Error class: unknown class>?, person: <Error class: unknown class>?, message: <Error class: unknown class>?, panel: <Error class: unknown class>?, textColor: Color?, withCurrent: Boolean, padding: Float, reason: String? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.addNoChangeMessage","location":"magiclib/org.magiclib.kotlin/add-no-change-message.html","searchKeys":["addNoChangeMessage","inline fun <Error class: unknown class>.addNoChangeMessage(deltaSign: Float, faction: <Error class: unknown class>?, person: <Error class: unknown class>?, message: <Error class: unknown class>?, panel: <Error class: unknown class>?, textColor: Color?, withCurrent: Boolean, padding: Float, reason: String? = null): <Error class: unknown class>","org.magiclib.kotlin.addNoChangeMessage"]},{"name":"inline fun <Error class: unknown class>.addOfficerGainText(officer: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.addOfficerGainText","location":"magiclib/org.magiclib.kotlin/add-officer-gain-text.html","searchKeys":["addOfficerGainText","inline fun <Error class: unknown class>.addOfficerGainText(officer: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.addOfficerGainText"]},{"name":"inline fun <Error class: unknown class>.addOfficerLossText(officer: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.addOfficerLossText","location":"magiclib/org.magiclib.kotlin/add-officer-loss-text.html","searchKeys":["addOfficerLossText","inline fun <Error class: unknown class>.addOfficerLossText(officer: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.addOfficerLossText"]},{"name":"inline fun <Error class: unknown class>.addRequiredStanding(faction: <Error class: unknown class>?, requiredStanding: <Error class: unknown class>, person: <Error class: unknown class>?, info: <Error class: unknown class>? = null, textColor: Color, padding: Float, orBetter: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.addRequiredStanding","location":"magiclib/org.magiclib.kotlin/add-required-standing.html","searchKeys":["addRequiredStanding","inline fun <Error class: unknown class>.addRequiredStanding(faction: <Error class: unknown class>?, requiredStanding: <Error class: unknown class>, person: <Error class: unknown class>?, info: <Error class: unknown class>? = null, textColor: Color, padding: Float, orBetter: Boolean): <Error class: unknown class>","org.magiclib.kotlin.addRequiredStanding"]},{"name":"inline fun <Error class: unknown class>.addRequiredStanding(faction: <Error class: unknown class>?, requiredStanding: <Error class: unknown class>, person: <Error class: unknown class>?, panel: <Error class: unknown class>? = null, textColor: Color, padding: Float, orBetter: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.addRequiredStanding","location":"magiclib/org.magiclib.kotlin/add-required-standing.html","searchKeys":["addRequiredStanding","inline fun <Error class: unknown class>.addRequiredStanding(faction: <Error class: unknown class>?, requiredStanding: <Error class: unknown class>, person: <Error class: unknown class>?, panel: <Error class: unknown class>? = null, textColor: Color, padding: Float, orBetter: Boolean): <Error class: unknown class>","org.magiclib.kotlin.addRequiredStanding"]},{"name":"inline fun <Error class: unknown class>.addStackGainText(stack: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.addStackGainText","location":"magiclib/org.magiclib.kotlin/add-stack-gain-text.html","searchKeys":["addStackGainText","inline fun <Error class: unknown class>.addStackGainText(stack: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.addStackGainText"]},{"name":"inline fun <Error class: unknown class>.addStackGainText(stack: <Error class: unknown class>, lowerCase: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.addStackGainText","location":"magiclib/org.magiclib.kotlin/add-stack-gain-text.html","searchKeys":["addStackGainText","inline fun <Error class: unknown class>.addStackGainText(stack: <Error class: unknown class>, lowerCase: Boolean): <Error class: unknown class>","org.magiclib.kotlin.addStackGainText"]},{"name":"inline fun <Error class: unknown class>.addStorageInfo(color: Color, dark: Color, market: <Error class: unknown class>, includeLocalResources: Boolean, addSectionIfEmpty: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.addStorageInfo","location":"magiclib/org.magiclib.kotlin/add-storage-info.html","searchKeys":["addStorageInfo","inline fun <Error class: unknown class>.addStorageInfo(color: Color, dark: Color, market: <Error class: unknown class>, includeLocalResources: Boolean, addSectionIfEmpty: Boolean): <Error class: unknown class>","org.magiclib.kotlin.addStorageInfo"]},{"name":"inline fun <Error class: unknown class>.addSurveyDataFor(text: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.addSurveyDataFor","location":"magiclib/org.magiclib.kotlin/add-survey-data-for.html","searchKeys":["addSurveyDataFor","inline fun <Error class: unknown class>.addSurveyDataFor(text: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.addSurveyDataFor"]},{"name":"inline fun <Error class: unknown class>.addWarningBeacon(gap: <Error class: unknown class>, beaconTag: String): <Error class: unknown class>","description":"org.magiclib.kotlin.addWarningBeacon","location":"magiclib/org.magiclib.kotlin/add-warning-beacon.html","searchKeys":["addWarningBeacon","inline fun <Error class: unknown class>.addWarningBeacon(gap: <Error class: unknown class>, beaconTag: String): <Error class: unknown class>","org.magiclib.kotlin.addWarningBeacon"]},{"name":"inline fun <Error class: unknown class>.adjustReputationWithPlayer(factionId: String, repChange: Float, limit: <Error class: unknown class>? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.adjustReputationWithPlayer","location":"magiclib/org.magiclib.kotlin/adjust-reputation-with-player.html","searchKeys":["adjustReputationWithPlayer","inline fun <Error class: unknown class>.adjustReputationWithPlayer(factionId: String, repChange: Float, limit: <Error class: unknown class>? = null): <Error class: unknown class>","org.magiclib.kotlin.adjustReputationWithPlayer"]},{"name":"inline fun <Error class: unknown class>.adjustReputationWithPlayer(person: <Error class: unknown class>, repChange: Float, limit: <Error class: unknown class>? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.adjustReputationWithPlayer","location":"magiclib/org.magiclib.kotlin/adjust-reputation-with-player.html","searchKeys":["adjustReputationWithPlayer","inline fun <Error class: unknown class>.adjustReputationWithPlayer(person: <Error class: unknown class>, repChange: Float, limit: <Error class: unknown class>? = null): <Error class: unknown class>","org.magiclib.kotlin.adjustReputationWithPlayer"]},{"name":"inline fun <Error class: unknown class>.adjustReputationWithPlayer(repChange: Float, textPanel: <Error class: unknown class>? = null, limit: <Error class: unknown class>? = null)","description":"org.magiclib.kotlin.adjustReputationWithPlayer","location":"magiclib/org.magiclib.kotlin/adjust-reputation-with-player.html","searchKeys":["adjustReputationWithPlayer","inline fun <Error class: unknown class>.adjustReputationWithPlayer(repChange: Float, textPanel: <Error class: unknown class>? = null, limit: <Error class: unknown class>? = null)","org.magiclib.kotlin.adjustReputationWithPlayer"]},{"name":"inline fun <Error class: unknown class>.adjustReputationWithPlayer(repChange: Float, textPanel: <Error class: unknown class>? = null, limit: <Error class: unknown class>? = null)","description":"org.magiclib.kotlin.adjustReputationWithPlayer","location":"magiclib/org.magiclib.kotlin/adjust-reputation-with-player.html","searchKeys":["adjustReputationWithPlayer","inline fun <Error class: unknown class>.adjustReputationWithPlayer(repChange: Float, textPanel: <Error class: unknown class>? = null, limit: <Error class: unknown class>? = null)","org.magiclib.kotlin.adjustReputationWithPlayer"]},{"name":"inline fun <Error class: unknown class>.affectAvailabilityWithinReason(quantity: Int): <Error class: unknown class>","description":"org.magiclib.kotlin.affectAvailabilityWithinReason","location":"magiclib/org.magiclib.kotlin/affect-availability-within-reason.html","searchKeys":["affectAvailabilityWithinReason","inline fun <Error class: unknown class>.affectAvailabilityWithinReason(quantity: Int): <Error class: unknown class>","org.magiclib.kotlin.affectAvailabilityWithinReason"]},{"name":"inline fun <Error class: unknown class>.applyDamage(random: Random, damageMult: Float, withCRDamage: Boolean, crDamageId: String, crDamageReason: String, withMessage: Boolean, textPanel: <Error class: unknown class>, messageText: String): <Error class: unknown class>","description":"org.magiclib.kotlin.applyDamage","location":"magiclib/org.magiclib.kotlin/apply-damage.html","searchKeys":["applyDamage","inline fun <Error class: unknown class>.applyDamage(random: Random, damageMult: Float, withCRDamage: Boolean, crDamageId: String, crDamageReason: String, withMessage: Boolean, textPanel: <Error class: unknown class>, messageText: String): <Error class: unknown class>","org.magiclib.kotlin.applyDamage"]},{"name":"inline fun <Error class: unknown class>.applyDamage(random: Random, level: <Error class: unknown class>, withCRDamage: Boolean, crDamageId: String, crDamageReason: String, withMessage: Boolean, textPanel: <Error class: unknown class>, messageText: String): <Error class: unknown class>","description":"org.magiclib.kotlin.applyDamage","location":"magiclib/org.magiclib.kotlin/apply-damage.html","searchKeys":["applyDamage","inline fun <Error class: unknown class>.applyDamage(random: Random, level: <Error class: unknown class>, withCRDamage: Boolean, crDamageId: String, crDamageReason: String, withMessage: Boolean, textPanel: <Error class: unknown class>, messageText: String): <Error class: unknown class>","org.magiclib.kotlin.applyDamage"]},{"name":"inline fun <Error class: unknown class>.bezier(p1: <Error class: unknown class>, p2: <Error class: unknown class>, t: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.bezier","location":"magiclib/org.magiclib.kotlin/bezier.html","searchKeys":["bezier","inline fun <Error class: unknown class>.bezier(p1: <Error class: unknown class>, p2: <Error class: unknown class>, t: Float): <Error class: unknown class>","org.magiclib.kotlin.bezier"]},{"name":"inline fun <Error class: unknown class>.bezierCubic(p1: <Error class: unknown class>, p2: <Error class: unknown class>, p3: <Error class: unknown class>, t: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.bezierCubic","location":"magiclib/org.magiclib.kotlin/bezier-cubic.html","searchKeys":["bezierCubic","inline fun <Error class: unknown class>.bezierCubic(p1: <Error class: unknown class>, p2: <Error class: unknown class>, p3: <Error class: unknown class>, t: Float): <Error class: unknown class>","org.magiclib.kotlin.bezierCubic"]},{"name":"inline fun <Error class: unknown class>.caresAboutPlayerTransponder(): <Error class: unknown class>","description":"org.magiclib.kotlin.caresAboutPlayerTransponder","location":"magiclib/org.magiclib.kotlin/cares-about-player-transponder.html","searchKeys":["caresAboutPlayerTransponder","inline fun <Error class: unknown class>.caresAboutPlayerTransponder(): <Error class: unknown class>","org.magiclib.kotlin.caresAboutPlayerTransponder"]},{"name":"inline fun <Error class: unknown class>.cleanUpMissionMemory(prefix: String): <Error class: unknown class>","description":"org.magiclib.kotlin.cleanUpMissionMemory","location":"magiclib/org.magiclib.kotlin/clean-up-mission-memory.html","searchKeys":["cleanUpMissionMemory","inline fun <Error class: unknown class>.cleanUpMissionMemory(prefix: String): <Error class: unknown class>","org.magiclib.kotlin.cleanUpMissionMemory"]},{"name":"inline fun <Error class: unknown class>.clearAsteroidSource(): <Error class: unknown class>","description":"org.magiclib.kotlin.clearAsteroidSource","location":"magiclib/org.magiclib.kotlin/clear-asteroid-source.html","searchKeys":["clearAsteroidSource","inline fun <Error class: unknown class>.clearAsteroidSource(): <Error class: unknown class>","org.magiclib.kotlin.clearAsteroidSource"]},{"name":"inline fun <Error class: unknown class>.clearDefeatTriggersIfNeeded(): <Error class: unknown class>","description":"org.magiclib.kotlin.clearDefeatTriggersIfNeeded","location":"magiclib/org.magiclib.kotlin/clear-defeat-triggers-if-needed.html","searchKeys":["clearDefeatTriggersIfNeeded","inline fun <Error class: unknown class>.clearDefeatTriggersIfNeeded(): <Error class: unknown class>","org.magiclib.kotlin.clearDefeatTriggersIfNeeded"]},{"name":"inline fun <Error class: unknown class>.clearFlag(flagKey: String): <Error class: unknown class>","description":"org.magiclib.kotlin.clearFlag","location":"magiclib/org.magiclib.kotlin/clear-flag.html","searchKeys":["clearFlag","inline fun <Error class: unknown class>.clearFlag(flagKey: String): <Error class: unknown class>","org.magiclib.kotlin.clearFlag"]},{"name":"inline fun <Error class: unknown class>.clearTarget(forgetTransponder: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.clearTarget","location":"magiclib/org.magiclib.kotlin/clear-target.html","searchKeys":["clearTarget","inline fun <Error class: unknown class>.clearTarget(forgetTransponder: Boolean): <Error class: unknown class>","org.magiclib.kotlin.clearTarget"]},{"name":"inline fun <Error class: unknown class>.closestPointOnLineToPoint(lineStart: <Error class: unknown class>, lineEnd: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.closestPointOnLineToPoint","location":"magiclib/org.magiclib.kotlin/closest-point-on-line-to-point.html","searchKeys":["closestPointOnLineToPoint","inline fun <Error class: unknown class>.closestPointOnLineToPoint(lineStart: <Error class: unknown class>, lineEnd: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.closestPointOnLineToPoint"]},{"name":"inline fun <Error class: unknown class>.closestPointOnSegmentToPoint(lineStart: <Error class: unknown class>, lineEnd: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.closestPointOnSegmentToPoint","location":"magiclib/org.magiclib.kotlin/closest-point-on-segment-to-point.html","searchKeys":["closestPointOnSegmentToPoint","inline fun <Error class: unknown class>.closestPointOnSegmentToPoint(lineStart: <Error class: unknown class>, lineEnd: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.closestPointOnSegmentToPoint"]},{"name":"inline fun <Error class: unknown class>.computeEconUnitChangeFromTradeModChange(quantity: Int): <Error class: unknown class>","description":"org.magiclib.kotlin.computeEconUnitChangeFromTradeModChange","location":"magiclib/org.magiclib.kotlin/compute-econ-unit-change-from-trade-mod-change.html","searchKeys":["computeEconUnitChangeFromTradeModChange","inline fun <Error class: unknown class>.computeEconUnitChangeFromTradeModChange(quantity: Int): <Error class: unknown class>","org.magiclib.kotlin.computeEconUnitChangeFromTradeModChange"]},{"name":"inline fun <Error class: unknown class>.computeShutdownRefund(industry: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.computeShutdownRefund","location":"magiclib/org.magiclib.kotlin/compute-shutdown-refund.html","searchKeys":["computeShutdownRefund","inline fun <Error class: unknown class>.computeShutdownRefund(industry: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.computeShutdownRefund"]},{"name":"inline fun <Error class: unknown class>.computeTotalShutdownRefund(): <Error class: unknown class>","description":"org.magiclib.kotlin.computeTotalShutdownRefund","location":"magiclib/org.magiclib.kotlin/compute-total-shutdown-refund.html","searchKeys":["computeTotalShutdownRefund","inline fun <Error class: unknown class>.computeTotalShutdownRefund(): <Error class: unknown class>","org.magiclib.kotlin.computeTotalShutdownRefund"]},{"name":"inline fun <Error class: unknown class>.createFleet(): <Error class: unknown class>","description":"org.magiclib.kotlin.createFleet","location":"magiclib/org.magiclib.kotlin/create-fleet.html","searchKeys":["createFleet","inline fun <Error class: unknown class>.createFleet(): <Error class: unknown class>","org.magiclib.kotlin.createFleet"]},{"name":"inline fun <Error class: unknown class>.crossesAnySlipstream(from: <Error class: unknown class>, to: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.crossesAnySlipstream","location":"magiclib/org.magiclib.kotlin/crosses-any-slipstream.html","searchKeys":["crossesAnySlipstream","inline fun <Error class: unknown class>.crossesAnySlipstream(from: <Error class: unknown class>, to: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.crossesAnySlipstream"]},{"name":"inline fun <Error class: unknown class>.distanceFromLineToPoint(lineStart: <Error class: unknown class>, lineEnd: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.distanceFromLineToPoint","location":"magiclib/org.magiclib.kotlin/distance-from-line-to-point.html","searchKeys":["distanceFromLineToPoint","inline fun <Error class: unknown class>.distanceFromLineToPoint(lineStart: <Error class: unknown class>, lineEnd: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.distanceFromLineToPoint"]},{"name":"inline fun <Error class: unknown class>.doesMarketHaveMissionImportantPeopleOrIsMarketMissionImportant(): <Error class: unknown class>","description":"org.magiclib.kotlin.doesMarketHaveMissionImportantPeopleOrIsMarketMissionImportant","location":"magiclib/org.magiclib.kotlin/does-market-have-mission-important-people-or-is-market-mission-important.html","searchKeys":["doesMarketHaveMissionImportantPeopleOrIsMarketMissionImportant","inline fun <Error class: unknown class>.doesMarketHaveMissionImportantPeopleOrIsMarketMissionImportant(): <Error class: unknown class>","org.magiclib.kotlin.doesMarketHaveMissionImportantPeopleOrIsMarketMissionImportant"]},{"name":"inline fun <Error class: unknown class>.fadeAndExpire(seconds: Float = 1.0f): <Error class: unknown class>","description":"org.magiclib.kotlin.fadeAndExpire","location":"magiclib/org.magiclib.kotlin/fade-and-expire.html","searchKeys":["fadeAndExpire","inline fun <Error class: unknown class>.fadeAndExpire(seconds: Float = 1.0f): <Error class: unknown class>","org.magiclib.kotlin.fadeAndExpire"]},{"name":"inline fun <Error class: unknown class>.fadeInOutAndExpire(in: Float, dur: Float, out: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.fadeInOutAndExpire","location":"magiclib/org.magiclib.kotlin/fade-in-out-and-expire.html","searchKeys":["fadeInOutAndExpire","inline fun <Error class: unknown class>.fadeInOutAndExpire(in: Float, dur: Float, out: Float): <Error class: unknown class>","org.magiclib.kotlin.fadeInOutAndExpire"]},{"name":"inline fun <Error class: unknown class>.findNearbyFleets(maxRange: Float, filter: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.findNearbyFleets","location":"magiclib/org.magiclib.kotlin/find-nearby-fleets.html","searchKeys":["findNearbyFleets","inline fun <Error class: unknown class>.findNearbyFleets(maxRange: Float, filter: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.findNearbyFleets"]},{"name":"inline fun <Error class: unknown class>.findNearbyLocalMarkets(maxDist: Float, filter: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.findNearbyLocalMarkets","location":"magiclib/org.magiclib.kotlin/find-nearby-local-markets.html","searchKeys":["findNearbyLocalMarkets","inline fun <Error class: unknown class>.findNearbyLocalMarkets(maxDist: Float, filter: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.findNearbyLocalMarkets"]},{"name":"inline fun <Error class: unknown class>.findNearestJumpPoint(): <Error class: unknown class>","description":"org.magiclib.kotlin.findNearestJumpPoint","location":"magiclib/org.magiclib.kotlin/find-nearest-jump-point.html","searchKeys":["findNearestJumpPoint","inline fun <Error class: unknown class>.findNearestJumpPoint(): <Error class: unknown class>","org.magiclib.kotlin.findNearestJumpPoint"]},{"name":"inline fun <Error class: unknown class>.findNearestJumpPointThatCouldBeExitedFrom(): <Error class: unknown class>","description":"org.magiclib.kotlin.findNearestJumpPointThatCouldBeExitedFrom","location":"magiclib/org.magiclib.kotlin/find-nearest-jump-point-that-could-be-exited-from.html","searchKeys":["findNearestJumpPointThatCouldBeExitedFrom","inline fun <Error class: unknown class>.findNearestJumpPointThatCouldBeExitedFrom(): <Error class: unknown class>","org.magiclib.kotlin.findNearestJumpPointThatCouldBeExitedFrom"]},{"name":"inline fun <Error class: unknown class>.findNearestJumpPointTo(): <Error class: unknown class>","description":"org.magiclib.kotlin.findNearestJumpPointTo","location":"magiclib/org.magiclib.kotlin/find-nearest-jump-point-to.html","searchKeys":["findNearestJumpPointTo","inline fun <Error class: unknown class>.findNearestJumpPointTo(): <Error class: unknown class>","org.magiclib.kotlin.findNearestJumpPointTo"]},{"name":"inline fun <Error class: unknown class>.findNearestLocalMarket(maxDist: Float, filter: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.findNearestLocalMarket","location":"magiclib/org.magiclib.kotlin/find-nearest-local-market.html","searchKeys":["findNearestLocalMarket","inline fun <Error class: unknown class>.findNearestLocalMarket(maxDist: Float, filter: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.findNearestLocalMarket"]},{"name":"inline fun <Error class: unknown class>.findNearestLocalMarketWithSameFaction(maxDist: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.findNearestLocalMarketWithSameFaction","location":"magiclib/org.magiclib.kotlin/find-nearest-local-market-with-same-faction.html","searchKeys":["findNearestLocalMarketWithSameFaction","inline fun <Error class: unknown class>.findNearestLocalMarketWithSameFaction(maxDist: Float): <Error class: unknown class>","org.magiclib.kotlin.findNearestLocalMarketWithSameFaction"]},{"name":"inline fun <Error class: unknown class>.findNearestPlanetTo(requireGasGiant: Boolean, allowStars: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.findNearestPlanetTo","location":"magiclib/org.magiclib.kotlin/find-nearest-planet-to.html","searchKeys":["findNearestPlanetTo","inline fun <Error class: unknown class>.findNearestPlanetTo(requireGasGiant: Boolean, allowStars: Boolean): <Error class: unknown class>","org.magiclib.kotlin.findNearestPlanetTo"]},{"name":"inline fun <Error class: unknown class>.flagHasReason(flagKey: String, reason: String): <Error class: unknown class>","description":"org.magiclib.kotlin.flagHasReason","location":"magiclib/org.magiclib.kotlin/flag-has-reason.html","searchKeys":["flagHasReason","inline fun <Error class: unknown class>.flagHasReason(flagKey: String, reason: String): <Error class: unknown class>","org.magiclib.kotlin.flagHasReason"]},{"name":"inline fun <Error class: unknown class>.forgetAboutTransponder(): <Error class: unknown class>","description":"org.magiclib.kotlin.forgetAboutTransponder","location":"magiclib/org.magiclib.kotlin/forget-about-transponder.html","searchKeys":["forgetAboutTransponder","inline fun <Error class: unknown class>.forgetAboutTransponder(): <Error class: unknown class>","org.magiclib.kotlin.forgetAboutTransponder"]},{"name":"inline fun <Error class: unknown class>.generatePlanetConditions(age: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.generatePlanetConditions","location":"magiclib/org.magiclib.kotlin/generate-planet-conditions.html","searchKeys":["generatePlanetConditions","inline fun <Error class: unknown class>.generatePlanetConditions(age: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.generatePlanetConditions"]},{"name":"inline fun <Error class: unknown class>.getAbandonMarketPlugin(): <Error class: unknown class>","description":"org.magiclib.kotlin.getAbandonMarketPlugin","location":"magiclib/org.magiclib.kotlin/get-abandon-market-plugin.html","searchKeys":["getAbandonMarketPlugin","inline fun <Error class: unknown class>.getAbandonMarketPlugin(): <Error class: unknown class>","org.magiclib.kotlin.getAbandonMarketPlugin"]},{"name":"inline fun <Error class: unknown class>.getAdminSalary(): <Error class: unknown class>","description":"org.magiclib.kotlin.getAdminSalary","location":"magiclib/org.magiclib.kotlin/get-admin-salary.html","searchKeys":["getAdminSalary","inline fun <Error class: unknown class>.getAdminSalary(): <Error class: unknown class>","org.magiclib.kotlin.getAdminSalary"]},{"name":"inline fun <Error class: unknown class>.getAngleInDegrees(): <Error class: unknown class>","description":"org.magiclib.kotlin.getAngleInDegrees","location":"magiclib/org.magiclib.kotlin/get-angle-in-degrees.html","searchKeys":["getAngleInDegrees","inline fun <Error class: unknown class>.getAngleInDegrees(): <Error class: unknown class>","org.magiclib.kotlin.getAngleInDegrees"]},{"name":"inline fun <Error class: unknown class>.getAngleInDegrees(to: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getAngleInDegrees","location":"magiclib/org.magiclib.kotlin/get-angle-in-degrees.html","searchKeys":["getAngleInDegrees","inline fun <Error class: unknown class>.getAngleInDegrees(to: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getAngleInDegrees"]},{"name":"inline fun <Error class: unknown class>.getAngleInDegreesStrict(): <Error class: unknown class>","description":"org.magiclib.kotlin.getAngleInDegreesStrict","location":"magiclib/org.magiclib.kotlin/get-angle-in-degrees-strict.html","searchKeys":["getAngleInDegreesStrict","inline fun <Error class: unknown class>.getAngleInDegreesStrict(): <Error class: unknown class>","org.magiclib.kotlin.getAngleInDegreesStrict"]},{"name":"inline fun <Error class: unknown class>.getAngleInDegreesStrict(to: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getAngleInDegreesStrict","location":"magiclib/org.magiclib.kotlin/get-angle-in-degrees-strict.html","searchKeys":["getAngleInDegreesStrict","inline fun <Error class: unknown class>.getAngleInDegreesStrict(to: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getAngleInDegreesStrict"]},{"name":"inline fun <Error class: unknown class>.getAsteroidSource(): <Error class: unknown class>","description":"org.magiclib.kotlin.getAsteroidSource","location":"magiclib/org.magiclib.kotlin/get-asteroid-source.html","searchKeys":["getAsteroidSource","inline fun <Error class: unknown class>.getAsteroidSource(): <Error class: unknown class>","org.magiclib.kotlin.getAsteroidSource"]},{"name":"inline fun <Error class: unknown class>.getBiggestMarketInLocation(): <Error class: unknown class>","description":"org.magiclib.kotlin.getBiggestMarketInLocation","location":"magiclib/org.magiclib.kotlin/get-biggest-market-in-location.html","searchKeys":["getBiggestMarketInLocation","inline fun <Error class: unknown class>.getBiggestMarketInLocation(): <Error class: unknown class>","org.magiclib.kotlin.getBiggestMarketInLocation"]},{"name":"inline fun <Error class: unknown class>.getBonusXPForRecovering(): <Error class: unknown class>","description":"org.magiclib.kotlin.getBonusXPForRecovering","location":"magiclib/org.magiclib.kotlin/get-bonus-x-p-for-recovering.html","searchKeys":["getBonusXPForRecovering","inline fun <Error class: unknown class>.getBonusXPForRecovering(): <Error class: unknown class>","org.magiclib.kotlin.getBonusXPForRecovering"]},{"name":"inline fun <Error class: unknown class>.getBonusXPForScuttling(): <Error class: unknown class>","description":"org.magiclib.kotlin.getBonusXPForScuttling","location":"magiclib/org.magiclib.kotlin/get-bonus-x-p-for-scuttling.html","searchKeys":["getBonusXPForScuttling","inline fun <Error class: unknown class>.getBonusXPForScuttling(): <Error class: unknown class>","org.magiclib.kotlin.getBonusXPForScuttling"]},{"name":"inline fun <Error class: unknown class>.getBuildInBonusXP(size: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getBuildInBonusXP","location":"magiclib/org.magiclib.kotlin/get-build-in-bonus-x-p.html","searchKeys":["getBuildInBonusXP","inline fun <Error class: unknown class>.getBuildInBonusXP(size: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getBuildInBonusXP"]},{"name":"inline fun <Error class: unknown class>.getBurnMultForTerrain(): <Error class: unknown class>","description":"org.magiclib.kotlin.getBurnMultForTerrain","location":"magiclib/org.magiclib.kotlin/get-burn-mult-for-terrain.html","searchKeys":["getBurnMultForTerrain","inline fun <Error class: unknown class>.getBurnMultForTerrain(): <Error class: unknown class>","org.magiclib.kotlin.getBurnMultForTerrain"]},{"name":"inline fun <Error class: unknown class>.getCampaignShipScaleMult(): <Error class: unknown class>","description":"org.magiclib.kotlin.getCampaignShipScaleMult","location":"magiclib/org.magiclib.kotlin/get-campaign-ship-scale-mult.html","searchKeys":["getCampaignShipScaleMult","inline fun <Error class: unknown class>.getCampaignShipScaleMult(): <Error class: unknown class>","org.magiclib.kotlin.getCampaignShipScaleMult"]},{"name":"inline fun <Error class: unknown class>.getClaimingFaction(): <Error class: unknown class>","description":"org.magiclib.kotlin.getClaimingFaction","location":"magiclib/org.magiclib.kotlin/get-claiming-faction.html","searchKeys":["getClaimingFaction","inline fun <Error class: unknown class>.getClaimingFaction(): <Error class: unknown class>","org.magiclib.kotlin.getClaimingFaction"]},{"name":"inline fun <Error class: unknown class>.getClosestTurnDirection(other: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getClosestTurnDirection","location":"magiclib/org.magiclib.kotlin/get-closest-turn-direction.html","searchKeys":["getClosestTurnDirection","inline fun <Error class: unknown class>.getClosestTurnDirection(other: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getClosestTurnDirection"]},{"name":"inline fun <Error class: unknown class>.getColor(key: String): <Error class: unknown class>","description":"org.magiclib.kotlin.getColor","location":"magiclib/org.magiclib.kotlin/get-color.html","searchKeys":["getColor","inline fun <Error class: unknown class>.getColor(key: String): <Error class: unknown class>","org.magiclib.kotlin.getColor"]},{"name":"inline fun <Error class: unknown class>.getCoronaFor(): <Error class: unknown class>","description":"org.magiclib.kotlin.getCoronaFor","location":"magiclib/org.magiclib.kotlin/get-corona-for.html","searchKeys":["getCoronaFor","inline fun <Error class: unknown class>.getCoronaFor(): <Error class: unknown class>","org.magiclib.kotlin.getCoronaFor"]},{"name":"inline fun <Error class: unknown class>.getCurrSpecialMods(): <Error class: unknown class>","description":"org.magiclib.kotlin.getCurrSpecialMods","location":"magiclib/org.magiclib.kotlin/get-curr-special-mods.html","searchKeys":["getCurrSpecialMods","inline fun <Error class: unknown class>.getCurrSpecialMods(): <Error class: unknown class>","org.magiclib.kotlin.getCurrSpecialMods"]},{"name":"inline fun <Error class: unknown class>.getCurrSpecialModsList(): <Error class: unknown class>","description":"org.magiclib.kotlin.getCurrSpecialModsList","location":"magiclib/org.magiclib.kotlin/get-curr-special-mods-list.html","searchKeys":["getCurrSpecialModsList","inline fun <Error class: unknown class>.getCurrSpecialModsList(): <Error class: unknown class>","org.magiclib.kotlin.getCurrSpecialModsList"]},{"name":"inline fun <Error class: unknown class>.getCurrentlyBeingConstructed(): <Error class: unknown class>","description":"org.magiclib.kotlin.getCurrentlyBeingConstructed","location":"magiclib/org.magiclib.kotlin/get-currently-being-constructed.html","searchKeys":["getCurrentlyBeingConstructed","inline fun <Error class: unknown class>.getCurrentlyBeingConstructed(): <Error class: unknown class>","org.magiclib.kotlin.getCurrentlyBeingConstructed"]},{"name":"inline fun <Error class: unknown class>.getDHullId(): <Error class: unknown class>","description":"org.magiclib.kotlin.getDHullId","location":"magiclib/org.magiclib.kotlin/get-d-hull-id.html","searchKeys":["getDHullId","inline fun <Error class: unknown class>.getDHullId(): <Error class: unknown class>","org.magiclib.kotlin.getDHullId"]},{"name":"inline fun <Error class: unknown class>.getDangerLevel(): <Error class: unknown class>","description":"org.magiclib.kotlin.getDangerLevel","location":"magiclib/org.magiclib.kotlin/get-danger-level.html","searchKeys":["getDangerLevel","inline fun <Error class: unknown class>.getDangerLevel(): <Error class: unknown class>","org.magiclib.kotlin.getDangerLevel"]},{"name":"inline fun <Error class: unknown class>.getDaysSinceLastRaided(): <Error class: unknown class>","description":"org.magiclib.kotlin.getDaysSinceLastRaided","location":"magiclib/org.magiclib.kotlin/get-days-since-last-raided.html","searchKeys":["getDaysSinceLastRaided","inline fun <Error class: unknown class>.getDaysSinceLastRaided(): <Error class: unknown class>","org.magiclib.kotlin.getDaysSinceLastRaided"]},{"name":"inline fun <Error class: unknown class>.getDefeatTriggers(createIfNecessary: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.getDefeatTriggers","location":"magiclib/org.magiclib.kotlin/get-defeat-triggers.html","searchKeys":["getDefeatTriggers","inline fun <Error class: unknown class>.getDefeatTriggers(createIfNecessary: Boolean): <Error class: unknown class>","org.magiclib.kotlin.getDefeatTriggers"]},{"name":"inline fun <Error class: unknown class>.getDesiredMoveDir(): <Error class: unknown class>","description":"org.magiclib.kotlin.getDesiredMoveDir","location":"magiclib/org.magiclib.kotlin/get-desired-move-dir.html","searchKeys":["getDesiredMoveDir","inline fun <Error class: unknown class>.getDesiredMoveDir(): <Error class: unknown class>","org.magiclib.kotlin.getDesiredMoveDir"]},{"name":"inline fun <Error class: unknown class>.getDiff(other: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getDiff","location":"magiclib/org.magiclib.kotlin/get-diff.html","searchKeys":["getDiff","inline fun <Error class: unknown class>.getDiff(other: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getDiff"]},{"name":"inline fun <Error class: unknown class>.getDistance(other: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getDistance","location":"magiclib/org.magiclib.kotlin/get-distance.html","searchKeys":["getDistance","inline fun <Error class: unknown class>.getDistance(other: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getDistance"]},{"name":"inline fun <Error class: unknown class>.getDistance(to: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getDistance","location":"magiclib/org.magiclib.kotlin/get-distance.html","searchKeys":["getDistance","inline fun <Error class: unknown class>.getDistance(to: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getDistance"]},{"name":"inline fun <Error class: unknown class>.getDistanceLY(to: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getDistanceLY","location":"magiclib/org.magiclib.kotlin/get-distance-l-y.html","searchKeys":["getDistanceLY","inline fun <Error class: unknown class>.getDistanceLY(to: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getDistanceLY"]},{"name":"inline fun <Error class: unknown class>.getDistanceLY(to: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getDistanceLY","location":"magiclib/org.magiclib.kotlin/get-distance-l-y.html","searchKeys":["getDistanceLY","inline fun <Error class: unknown class>.getDistanceLY(to: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getDistanceLY"]},{"name":"inline fun <Error class: unknown class>.getDistanceSq(to: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getDistanceSq","location":"magiclib/org.magiclib.kotlin/get-distance-sq.html","searchKeys":["getDistanceSq","inline fun <Error class: unknown class>.getDistanceSq(to: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getDistanceSq"]},{"name":"inline fun <Error class: unknown class>.getDistanceToPlayerLY(): <Error class: unknown class>","description":"org.magiclib.kotlin.getDistanceToPlayerLY","location":"magiclib/org.magiclib.kotlin/get-distance-to-player-l-y.html","searchKeys":["getDistanceToPlayerLY","inline fun <Error class: unknown class>.getDistanceToPlayerLY(): <Error class: unknown class>","org.magiclib.kotlin.getDistanceToPlayerLY"]},{"name":"inline fun <Error class: unknown class>.getDistanceToPlayerLY(): <Error class: unknown class>","description":"org.magiclib.kotlin.getDistanceToPlayerLY","location":"magiclib/org.magiclib.kotlin/get-distance-to-player-l-y.html","searchKeys":["getDistanceToPlayerLY","inline fun <Error class: unknown class>.getDistanceToPlayerLY(): <Error class: unknown class>","org.magiclib.kotlin.getDistanceToPlayerLY"]},{"name":"inline fun <Error class: unknown class>.getDistressJumpPoint(): <Error class: unknown class>","description":"org.magiclib.kotlin.getDistressJumpPoint","location":"magiclib/org.magiclib.kotlin/get-distress-jump-point.html","searchKeys":["getDistressJumpPoint","inline fun <Error class: unknown class>.getDistressJumpPoint(): <Error class: unknown class>","org.magiclib.kotlin.getDistressJumpPoint"]},{"name":"inline fun <Error class: unknown class>.getEstimatedOrbitIndex(): <Error class: unknown class>","description":"org.magiclib.kotlin.getEstimatedOrbitIndex","location":"magiclib/org.magiclib.kotlin/get-estimated-orbit-index.html","searchKeys":["getEstimatedOrbitIndex","inline fun <Error class: unknown class>.getEstimatedOrbitIndex(): <Error class: unknown class>","org.magiclib.kotlin.getEstimatedOrbitIndex"]},{"name":"inline fun <Error class: unknown class>.getFactionMarkets(econGroup: String? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.getFactionMarkets","location":"magiclib/org.magiclib.kotlin/get-faction-markets.html","searchKeys":["getFactionMarkets","inline fun <Error class: unknown class>.getFactionMarkets(econGroup: String? = null): <Error class: unknown class>","org.magiclib.kotlin.getFactionMarkets"]},{"name":"inline fun <Error class: unknown class>.getFleetRadiusTerrainEffectMult(): <Error class: unknown class>","description":"org.magiclib.kotlin.getFleetRadiusTerrainEffectMult","location":"magiclib/org.magiclib.kotlin/get-fleet-radius-terrain-effect-mult.html","searchKeys":["getFleetRadiusTerrainEffectMult","inline fun <Error class: unknown class>.getFleetRadiusTerrainEffectMult(): <Error class: unknown class>","org.magiclib.kotlin.getFleetRadiusTerrainEffectMult"]},{"name":"inline fun <Error class: unknown class>.getFleetsInOrNearSystem(): <Error class: unknown class>","description":"org.magiclib.kotlin.getFleetsInOrNearSystem","location":"magiclib/org.magiclib.kotlin/get-fleets-in-or-near-system.html","searchKeys":["getFleetsInOrNearSystem","inline fun <Error class: unknown class>.getFleetsInOrNearSystem(): <Error class: unknown class>","org.magiclib.kotlin.getFleetsInOrNearSystem"]},{"name":"inline fun <Error class: unknown class>.getFleetwideTotalMod(dynamicMemberStatId: String, base: Float, ship: <Error class: unknown class>? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.getFleetwideTotalMod","location":"magiclib/org.magiclib.kotlin/get-fleetwide-total-mod.html","searchKeys":["getFleetwideTotalMod","inline fun <Error class: unknown class>.getFleetwideTotalMod(dynamicMemberStatId: String, base: Float, ship: <Error class: unknown class>? = null): <Error class: unknown class>","org.magiclib.kotlin.getFleetwideTotalMod"]},{"name":"inline fun <Error class: unknown class>.getFleetwideTotalStat(dynamicMemberStatId: String): <Error class: unknown class>","description":"org.magiclib.kotlin.getFleetwideTotalStat","location":"magiclib/org.magiclib.kotlin/get-fleetwide-total-stat.html","searchKeys":["getFleetwideTotalStat","inline fun <Error class: unknown class>.getFleetwideTotalStat(dynamicMemberStatId: String): <Error class: unknown class>","org.magiclib.kotlin.getFleetwideTotalStat"]},{"name":"inline fun <Error class: unknown class>.getFuelPerDay(burnLevel: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.getFuelPerDay","location":"magiclib/org.magiclib.kotlin/get-fuel-per-day.html","searchKeys":["getFuelPerDay","inline fun <Error class: unknown class>.getFuelPerDay(burnLevel: Float): <Error class: unknown class>","org.magiclib.kotlin.getFuelPerDay"]},{"name":"inline fun <Error class: unknown class>.getFuelPerDayAtSpeed(speed: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.getFuelPerDayAtSpeed","location":"magiclib/org.magiclib.kotlin/get-fuel-per-day-at-speed.html","searchKeys":["getFuelPerDayAtSpeed","inline fun <Error class: unknown class>.getFuelPerDayAtSpeed(speed: Float): <Error class: unknown class>","org.magiclib.kotlin.getFuelPerDayAtSpeed"]},{"name":"inline fun <Error class: unknown class>.getGoSlowBurnLevel(): <Error class: unknown class>","description":"org.magiclib.kotlin.getGoSlowBurnLevel","location":"magiclib/org.magiclib.kotlin/get-go-slow-burn-level.html","searchKeys":["getGoSlowBurnLevel","inline fun <Error class: unknown class>.getGoSlowBurnLevel(): <Error class: unknown class>","org.magiclib.kotlin.getGoSlowBurnLevel"]},{"name":"inline fun <Error class: unknown class>.getImmigrationPlugin(): <Error class: unknown class>","description":"org.magiclib.kotlin.getImmigrationPlugin","location":"magiclib/org.magiclib.kotlin/get-immigration-plugin.html","searchKeys":["getImmigrationPlugin","inline fun <Error class: unknown class>.getImmigrationPlugin(): <Error class: unknown class>","org.magiclib.kotlin.getImmigrationPlugin"]},{"name":"inline fun <Error class: unknown class>.getIncapacitatedTime(): <Error class: unknown class>","description":"org.magiclib.kotlin.getIncapacitatedTime","location":"magiclib/org.magiclib.kotlin/get-incapacitated-time.html","searchKeys":["getIncapacitatedTime","inline fun <Error class: unknown class>.getIncapacitatedTime(): <Error class: unknown class>","org.magiclib.kotlin.getIncapacitatedTime"]},{"name":"inline fun <Error class: unknown class>.getInflater(params: Any): <Error class: unknown class>","description":"org.magiclib.kotlin.getInflater","location":"magiclib/org.magiclib.kotlin/get-inflater.html","searchKeys":["getInflater","inline fun <Error class: unknown class>.getInflater(params: Any): <Error class: unknown class>","org.magiclib.kotlin.getInflater"]},{"name":"inline fun <Error class: unknown class>.getInterceptPoint(other: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getInterceptPoint","location":"magiclib/org.magiclib.kotlin/get-intercept-point.html","searchKeys":["getInterceptPoint","inline fun <Error class: unknown class>.getInterceptPoint(other: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getInterceptPoint"]},{"name":"inline fun <Error class: unknown class>.getInterceptPoint(other: <Error class: unknown class>, maxSpeedFrom: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.getInterceptPoint","location":"magiclib/org.magiclib.kotlin/get-intercept-point.html","searchKeys":["getInterceptPoint","inline fun <Error class: unknown class>.getInterceptPoint(other: <Error class: unknown class>, maxSpeedFrom: Float): <Error class: unknown class>","org.magiclib.kotlin.getInterceptPoint"]},{"name":"inline fun <Error class: unknown class>.getInterceptPointBasic(to: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getInterceptPointBasic","location":"magiclib/org.magiclib.kotlin/get-intercept-point-basic.html","searchKeys":["getInterceptPointBasic","inline fun <Error class: unknown class>.getInterceptPointBasic(to: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getInterceptPointBasic"]},{"name":"inline fun <Error class: unknown class>.getJumpPointTo(): <Error class: unknown class>","description":"org.magiclib.kotlin.getJumpPointTo","location":"magiclib/org.magiclib.kotlin/get-jump-point-to.html","searchKeys":["getJumpPointTo","inline fun <Error class: unknown class>.getJumpPointTo(): <Error class: unknown class>","org.magiclib.kotlin.getJumpPointTo"]},{"name":"inline fun <Error class: unknown class>.getLYPerDayAtBurn(burnLevel: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.getLYPerDayAtBurn","location":"magiclib/org.magiclib.kotlin/get-l-y-per-day-at-burn.html","searchKeys":["getLYPerDayAtBurn","inline fun <Error class: unknown class>.getLYPerDayAtBurn(burnLevel: Float): <Error class: unknown class>","org.magiclib.kotlin.getLYPerDayAtBurn"]},{"name":"inline fun <Error class: unknown class>.getLYPerDayAtSpeed(speed: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.getLYPerDayAtSpeed","location":"magiclib/org.magiclib.kotlin/get-l-y-per-day-at-speed.html","searchKeys":["getLYPerDayAtSpeed","inline fun <Error class: unknown class>.getLYPerDayAtSpeed(speed: Float): <Error class: unknown class>","org.magiclib.kotlin.getLYPerDayAtSpeed"]},{"name":"inline fun <Error class: unknown class>.getLocalResources(): <Error class: unknown class>","description":"org.magiclib.kotlin.getLocalResources","location":"magiclib/org.magiclib.kotlin/get-local-resources.html","searchKeys":["getLocalResources","inline fun <Error class: unknown class>.getLocalResources(): <Error class: unknown class>","org.magiclib.kotlin.getLocalResources"]},{"name":"inline fun <Error class: unknown class>.getLocalResourcesCargo(): <Error class: unknown class>","description":"org.magiclib.kotlin.getLocalResourcesCargo","location":"magiclib/org.magiclib.kotlin/get-local-resources-cargo.html","searchKeys":["getLocalResourcesCargo","inline fun <Error class: unknown class>.getLocalResourcesCargo(): <Error class: unknown class>","org.magiclib.kotlin.getLocalResourcesCargo"]},{"name":"inline fun <Error class: unknown class>.getMarketSizeProgress(): <Error class: unknown class>","description":"org.magiclib.kotlin.getMarketSizeProgress","location":"magiclib/org.magiclib.kotlin/get-market-size-progress.html","searchKeys":["getMarketSizeProgress","inline fun <Error class: unknown class>.getMarketSizeProgress(): <Error class: unknown class>","org.magiclib.kotlin.getMarketSizeProgress"]},{"name":"inline fun <Error class: unknown class>.getMarketsInLocation(factionId: String? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.getMarketsInLocation","location":"magiclib/org.magiclib.kotlin/get-markets-in-location.html","searchKeys":["getMarketsInLocation","inline fun <Error class: unknown class>.getMarketsInLocation(factionId: String? = null): <Error class: unknown class>","org.magiclib.kotlin.getMarketsInLocation"]},{"name":"inline fun <Error class: unknown class>.getMaxIndustries(): <Error class: unknown class>","description":"org.magiclib.kotlin.getMaxIndustries","location":"magiclib/org.magiclib.kotlin/get-max-industries.html","searchKeys":["getMaxIndustries","inline fun <Error class: unknown class>.getMaxIndustries(): <Error class: unknown class>","org.magiclib.kotlin.getMaxIndustries"]},{"name":"inline fun <Error class: unknown class>.getMaxOfficers(): <Error class: unknown class>","description":"org.magiclib.kotlin.getMaxOfficers","location":"magiclib/org.magiclib.kotlin/get-max-officers.html","searchKeys":["getMaxOfficers","inline fun <Error class: unknown class>.getMaxOfficers(): <Error class: unknown class>","org.magiclib.kotlin.getMaxOfficers"]},{"name":"inline fun <Error class: unknown class>.getMaxPermanentMods(): <Error class: unknown class>","description":"org.magiclib.kotlin.getMaxPermanentMods","location":"magiclib/org.magiclib.kotlin/get-max-permanent-mods.html","searchKeys":["getMaxPermanentMods","inline fun <Error class: unknown class>.getMaxPermanentMods(): <Error class: unknown class>","org.magiclib.kotlin.getMaxPermanentMods"]},{"name":"inline fun <Error class: unknown class>.getMaxPermanentMods(stats: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getMaxPermanentMods","location":"magiclib/org.magiclib.kotlin/get-max-permanent-mods.html","searchKeys":["getMaxPermanentMods","inline fun <Error class: unknown class>.getMaxPermanentMods(stats: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getMaxPermanentMods"]},{"name":"inline fun <Error class: unknown class>.getMemberStrength(withHull: Boolean = true, withQuality: Boolean = true, withCaptain: Boolean = true): <Error class: unknown class>","description":"org.magiclib.kotlin.getMemberStrength","location":"magiclib/org.magiclib.kotlin/get-member-strength.html","searchKeys":["getMemberStrength","inline fun <Error class: unknown class>.getMemberStrength(withHull: Boolean = true, withQuality: Boolean = true, withCaptain: Boolean = true): <Error class: unknown class>","org.magiclib.kotlin.getMemberStrength"]},{"name":"inline fun <Error class: unknown class>.getMercDaysSinceHired(): <Error class: unknown class>","description":"org.magiclib.kotlin.getMercDaysSinceHired","location":"magiclib/org.magiclib.kotlin/get-merc-days-since-hired.html","searchKeys":["getMercDaysSinceHired","inline fun <Error class: unknown class>.getMercDaysSinceHired(): <Error class: unknown class>","org.magiclib.kotlin.getMercDaysSinceHired"]},{"name":"inline fun <Error class: unknown class>.getMercs(): <Error class: unknown class>","description":"org.magiclib.kotlin.getMercs","location":"magiclib/org.magiclib.kotlin/get-mercs.html","searchKeys":["getMercs","inline fun <Error class: unknown class>.getMercs(): <Error class: unknown class>","org.magiclib.kotlin.getMercs"]},{"name":"inline fun <Error class: unknown class>.getMinSystemSurveyLevel(): <Error class: unknown class>","description":"org.magiclib.kotlin.getMinSystemSurveyLevel","location":"magiclib/org.magiclib.kotlin/get-min-system-survey-level.html","searchKeys":["getMinSystemSurveyLevel","inline fun <Error class: unknown class>.getMinSystemSurveyLevel(): <Error class: unknown class>","org.magiclib.kotlin.getMinSystemSurveyLevel"]},{"name":"inline fun <Error class: unknown class>.getNameBasedSeed(): <Error class: unknown class>","description":"org.magiclib.kotlin.getNameBasedSeed","location":"magiclib/org.magiclib.kotlin/get-name-based-seed.html","searchKeys":["getNameBasedSeed","inline fun <Error class: unknown class>.getNameBasedSeed(): <Error class: unknown class>","org.magiclib.kotlin.getNameBasedSeed"]},{"name":"inline fun <Error class: unknown class>.getNearbyFleets(maxDist: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.getNearbyFleets","location":"magiclib/org.magiclib.kotlin/get-nearby-fleets.html","searchKeys":["getNearbyFleets","inline fun <Error class: unknown class>.getNearbyFleets(maxDist: Float): <Error class: unknown class>","org.magiclib.kotlin.getNearbyFleets"]},{"name":"inline fun <Error class: unknown class>.getNearbyMarkets(distLY: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.getNearbyMarkets","location":"magiclib/org.magiclib.kotlin/get-nearby-markets.html","searchKeys":["getNearbyMarkets","inline fun <Error class: unknown class>.getNearbyMarkets(distLY: Float): <Error class: unknown class>","org.magiclib.kotlin.getNearbyMarkets"]},{"name":"inline fun <Error class: unknown class>.getNearbyStarSystem(): <Error class: unknown class>","description":"org.magiclib.kotlin.getNearbyStarSystem","location":"magiclib/org.magiclib.kotlin/get-nearby-star-system.html","searchKeys":["getNearbyStarSystem","inline fun <Error class: unknown class>.getNearbyStarSystem(): <Error class: unknown class>","org.magiclib.kotlin.getNearbyStarSystem"]},{"name":"inline fun <Error class: unknown class>.getNearbyStarSystem(maxRangeLY: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.getNearbyStarSystem","location":"magiclib/org.magiclib.kotlin/get-nearby-star-system.html","searchKeys":["getNearbyStarSystem","inline fun <Error class: unknown class>.getNearbyStarSystem(maxRangeLY: Float): <Error class: unknown class>","org.magiclib.kotlin.getNearbyStarSystem"]},{"name":"inline fun <Error class: unknown class>.getNearbyStarSystems(maxRangeLY: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.getNearbyStarSystems","location":"magiclib/org.magiclib.kotlin/get-nearby-star-systems.html","searchKeys":["getNearbyStarSystems","inline fun <Error class: unknown class>.getNearbyStarSystems(maxRangeLY: Float): <Error class: unknown class>","org.magiclib.kotlin.getNearbyStarSystems"]},{"name":"inline fun <Error class: unknown class>.getNearestStarSystem(): <Error class: unknown class>","description":"org.magiclib.kotlin.getNearestStarSystem","location":"magiclib/org.magiclib.kotlin/get-nearest-star-system.html","searchKeys":["getNearestStarSystem","inline fun <Error class: unknown class>.getNearestStarSystem(): <Error class: unknown class>","org.magiclib.kotlin.getNearestStarSystem"]},{"name":"inline fun <Error class: unknown class>.getNearestStationInSupportRange(): <Error class: unknown class>","description":"org.magiclib.kotlin.getNearestStationInSupportRange","location":"magiclib/org.magiclib.kotlin/get-nearest-station-in-support-range.html","searchKeys":["getNearestStationInSupportRange","inline fun <Error class: unknown class>.getNearestStationInSupportRange(): <Error class: unknown class>","org.magiclib.kotlin.getNearestStationInSupportRange"]},{"name":"inline fun <Error class: unknown class>.getNumEliteSkills(): <Error class: unknown class>","description":"org.magiclib.kotlin.getNumEliteSkills","location":"magiclib/org.magiclib.kotlin/get-num-elite-skills.html","searchKeys":["getNumEliteSkills","inline fun <Error class: unknown class>.getNumEliteSkills(): <Error class: unknown class>","org.magiclib.kotlin.getNumEliteSkills"]},{"name":"inline fun <Error class: unknown class>.getNumHostileMarkets(from: <Error class: unknown class>, maxDist: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.getNumHostileMarkets","location":"magiclib/org.magiclib.kotlin/get-num-hostile-markets.html","searchKeys":["getNumHostileMarkets","inline fun <Error class: unknown class>.getNumHostileMarkets(from: <Error class: unknown class>, maxDist: Float): <Error class: unknown class>","org.magiclib.kotlin.getNumHostileMarkets"]},{"name":"inline fun <Error class: unknown class>.getNumImprovedIndustries(): <Error class: unknown class>","description":"org.magiclib.kotlin.getNumImprovedIndustries","location":"magiclib/org.magiclib.kotlin/get-num-improved-industries.html","searchKeys":["getNumImprovedIndustries","inline fun <Error class: unknown class>.getNumImprovedIndustries(): <Error class: unknown class>","org.magiclib.kotlin.getNumImprovedIndustries"]},{"name":"inline fun <Error class: unknown class>.getNumIndustries(): <Error class: unknown class>","description":"org.magiclib.kotlin.getNumIndustries","location":"magiclib/org.magiclib.kotlin/get-num-industries.html","searchKeys":["getNumIndustries","inline fun <Error class: unknown class>.getNumIndustries(): <Error class: unknown class>","org.magiclib.kotlin.getNumIndustries"]},{"name":"inline fun <Error class: unknown class>.getNumNonMercOfficers(): <Error class: unknown class>","description":"org.magiclib.kotlin.getNumNonMercOfficers","location":"magiclib/org.magiclib.kotlin/get-num-non-merc-officers.html","searchKeys":["getNumNonMercOfficers","inline fun <Error class: unknown class>.getNumNonMercOfficers(): <Error class: unknown class>","org.magiclib.kotlin.getNumNonMercOfficers"]},{"name":"inline fun <Error class: unknown class>.getNumStableLocations(): <Error class: unknown class>","description":"org.magiclib.kotlin.getNumStableLocations","location":"magiclib/org.magiclib.kotlin/get-num-stable-locations.html","searchKeys":["getNumStableLocations","inline fun <Error class: unknown class>.getNumStableLocations(): <Error class: unknown class>","org.magiclib.kotlin.getNumStableLocations"]},{"name":"inline fun <Error class: unknown class>.getOPCost(size: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getOPCost","location":"magiclib/org.magiclib.kotlin/get-o-p-cost.html","searchKeys":["getOPCost","inline fun <Error class: unknown class>.getOPCost(size: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getOPCost"]},{"name":"inline fun <Error class: unknown class>.getOfficerSalary(mercenary: Boolean = Misc.isMercenary(this)): <Error class: unknown class>","description":"org.magiclib.kotlin.getOfficerSalary","location":"magiclib/org.magiclib.kotlin/get-officer-salary.html","searchKeys":["getOfficerSalary","inline fun <Error class: unknown class>.getOfficerSalary(mercenary: Boolean = Misc.isMercenary(this)): <Error class: unknown class>","org.magiclib.kotlin.getOfficerSalary"]},{"name":"inline fun <Error class: unknown class>.getPerp(): <Error class: unknown class>","description":"org.magiclib.kotlin.getPerp","location":"magiclib/org.magiclib.kotlin/get-perp.html","searchKeys":["getPerp","inline fun <Error class: unknown class>.getPerp(): <Error class: unknown class>","org.magiclib.kotlin.getPerp"]},{"name":"inline fun <Error class: unknown class>.getPersonalityName(): <Error class: unknown class>","description":"org.magiclib.kotlin.getPersonalityName","location":"magiclib/org.magiclib.kotlin/get-personality-name.html","searchKeys":["getPersonalityName","inline fun <Error class: unknown class>.getPersonalityName(): <Error class: unknown class>","org.magiclib.kotlin.getPersonalityName"]},{"name":"inline fun <Error class: unknown class>.getPointAtRadius(r: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.getPointAtRadius","location":"magiclib/org.magiclib.kotlin/get-point-at-radius.html","searchKeys":["getPointAtRadius","inline fun <Error class: unknown class>.getPointAtRadius(r: Float): <Error class: unknown class>","org.magiclib.kotlin.getPointAtRadius"]},{"name":"inline fun <Error class: unknown class>.getPointAtRadius(r: Float, random: Random): <Error class: unknown class>","description":"org.magiclib.kotlin.getPointAtRadius","location":"magiclib/org.magiclib.kotlin/get-point-at-radius.html","searchKeys":["getPointAtRadius","inline fun <Error class: unknown class>.getPointAtRadius(r: Float, random: Random): <Error class: unknown class>","org.magiclib.kotlin.getPointAtRadius"]},{"name":"inline fun <Error class: unknown class>.getPointWithinRadius(r: Float, random: Random = Misc.random): <Error class: unknown class>","description":"org.magiclib.kotlin.getPointWithinRadius","location":"magiclib/org.magiclib.kotlin/get-point-within-radius.html","searchKeys":["getPointWithinRadius","inline fun <Error class: unknown class>.getPointWithinRadius(r: Float, random: Random = Misc.random): <Error class: unknown class>","org.magiclib.kotlin.getPointWithinRadius"]},{"name":"inline fun <Error class: unknown class>.getPointWithinRadiusUniform(minR: Float, maxR: Float, random: Random): <Error class: unknown class>","description":"org.magiclib.kotlin.getPointWithinRadiusUniform","location":"magiclib/org.magiclib.kotlin/get-point-within-radius-uniform.html","searchKeys":["getPointWithinRadiusUniform","inline fun <Error class: unknown class>.getPointWithinRadiusUniform(minR: Float, maxR: Float, random: Random): <Error class: unknown class>","org.magiclib.kotlin.getPointWithinRadiusUniform"]},{"name":"inline fun <Error class: unknown class>.getPointWithinRadiusUniform(r: Float, random: Random): <Error class: unknown class>","description":"org.magiclib.kotlin.getPointWithinRadiusUniform","location":"magiclib/org.magiclib.kotlin/get-point-within-radius-uniform.html","searchKeys":["getPointWithinRadiusUniform","inline fun <Error class: unknown class>.getPointWithinRadiusUniform(r: Float, random: Random): <Error class: unknown class>","org.magiclib.kotlin.getPointWithinRadiusUniform"]},{"name":"inline fun <Error class: unknown class>.getPrevSalvageSpecial(): <Error class: unknown class>","description":"org.magiclib.kotlin.getPrevSalvageSpecial","location":"magiclib/org.magiclib.kotlin/get-prev-salvage-special.html","searchKeys":["getPrevSalvageSpecial","inline fun <Error class: unknown class>.getPrevSalvageSpecial(): <Error class: unknown class>","org.magiclib.kotlin.getPrevSalvageSpecial"]},{"name":"inline fun <Error class: unknown class>.getPulsarFor(): <Error class: unknown class>","description":"org.magiclib.kotlin.getPulsarFor","location":"magiclib/org.magiclib.kotlin/get-pulsar-for.html","searchKeys":["getPulsarFor","inline fun <Error class: unknown class>.getPulsarFor(): <Error class: unknown class>","org.magiclib.kotlin.getPulsarFor"]},{"name":"inline fun <Error class: unknown class>.getPulsarInSystem(): <Error class: unknown class>","description":"org.magiclib.kotlin.getPulsarInSystem","location":"magiclib/org.magiclib.kotlin/get-pulsar-in-system.html","searchKeys":["getPulsarInSystem","inline fun <Error class: unknown class>.getPulsarInSystem(): <Error class: unknown class>","org.magiclib.kotlin.getPulsarInSystem"]},{"name":"inline fun <Error class: unknown class>.getSalvageSeed(): <Error class: unknown class>","description":"org.magiclib.kotlin.getSalvageSeed","location":"magiclib/org.magiclib.kotlin/get-salvage-seed.html","searchKeys":["getSalvageSeed","inline fun <Error class: unknown class>.getSalvageSeed(): <Error class: unknown class>","org.magiclib.kotlin.getSalvageSeed"]},{"name":"inline fun <Error class: unknown class>.getSalvageSpecial(): <Error class: unknown class>","description":"org.magiclib.kotlin.getSalvageSpecial","location":"magiclib/org.magiclib.kotlin/get-salvage-special.html","searchKeys":["getSalvageSpecial","inline fun <Error class: unknown class>.getSalvageSpecial(): <Error class: unknown class>","org.magiclib.kotlin.getSalvageSpecial"]},{"name":"inline fun <Error class: unknown class>.getShieldedCargoFraction(): <Error class: unknown class>","description":"org.magiclib.kotlin.getShieldedCargoFraction","location":"magiclib/org.magiclib.kotlin/get-shielded-cargo-fraction.html","searchKeys":["getShieldedCargoFraction","inline fun <Error class: unknown class>.getShieldedCargoFraction(): <Error class: unknown class>","org.magiclib.kotlin.getShieldedCargoFraction"]},{"name":"inline fun <Error class: unknown class>.getShipPickMode(factionId: String? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.getShipPickMode","location":"magiclib/org.magiclib.kotlin/get-ship-pick-mode.html","searchKeys":["getShipPickMode","inline fun <Error class: unknown class>.getShipPickMode(factionId: String? = null): <Error class: unknown class>","org.magiclib.kotlin.getShipPickMode"]},{"name":"inline fun <Error class: unknown class>.getShipQuality(factionId: String? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.getShipQuality","location":"magiclib/org.magiclib.kotlin/get-ship-quality.html","searchKeys":["getShipQuality","inline fun <Error class: unknown class>.getShipQuality(factionId: String? = null): <Error class: unknown class>","org.magiclib.kotlin.getShipQuality"]},{"name":"inline fun <Error class: unknown class>.getShipWeight(adjustForNonCombat: Boolean = true): <Error class: unknown class>","description":"org.magiclib.kotlin.getShipWeight","location":"magiclib/org.magiclib.kotlin/get-ship-weight.html","searchKeys":["getShipWeight","inline fun <Error class: unknown class>.getShipWeight(adjustForNonCombat: Boolean = true): <Error class: unknown class>","org.magiclib.kotlin.getShipWeight"]},{"name":"inline fun <Error class: unknown class>.getShippingCapacity(inFaction: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.getShippingCapacity","location":"magiclib/org.magiclib.kotlin/get-shipping-capacity.html","searchKeys":["getShippingCapacity","inline fun <Error class: unknown class>.getShippingCapacity(inFaction: Boolean): <Error class: unknown class>","org.magiclib.kotlin.getShippingCapacity"]},{"name":"inline fun <Error class: unknown class>.getSizeNum(): <Error class: unknown class>","description":"org.magiclib.kotlin.getSizeNum","location":"magiclib/org.magiclib.kotlin/get-size-num.html","searchKeys":["getSizeNum","inline fun <Error class: unknown class>.getSizeNum(): <Error class: unknown class>","org.magiclib.kotlin.getSizeNum"]},{"name":"inline fun <Error class: unknown class>.getSnapshotFPLost(): <Error class: unknown class>","description":"org.magiclib.kotlin.getSnapshotFPLost","location":"magiclib/org.magiclib.kotlin/get-snapshot-f-p-lost.html","searchKeys":["getSnapshotFPLost","inline fun <Error class: unknown class>.getSnapshotFPLost(): <Error class: unknown class>","org.magiclib.kotlin.getSnapshotFPLost"]},{"name":"inline fun <Error class: unknown class>.getSnapshotMembersLost(): <Error class: unknown class>","description":"org.magiclib.kotlin.getSnapshotMembersLost","location":"magiclib/org.magiclib.kotlin/get-snapshot-members-lost.html","searchKeys":["getSnapshotMembersLost","inline fun <Error class: unknown class>.getSnapshotMembersLost(): <Error class: unknown class>","org.magiclib.kotlin.getSnapshotMembersLost"]},{"name":"inline fun <Error class: unknown class>.getSourceMarket(): <Error class: unknown class>","description":"org.magiclib.kotlin.getSourceMarket","location":"magiclib/org.magiclib.kotlin/get-source-market.html","searchKeys":["getSourceMarket","inline fun <Error class: unknown class>.getSourceMarket(): <Error class: unknown class>","org.magiclib.kotlin.getSourceMarket"]},{"name":"inline fun <Error class: unknown class>.getSpaceport(): <Error class: unknown class>","description":"org.magiclib.kotlin.getSpaceport","location":"magiclib/org.magiclib.kotlin/get-spaceport.html","searchKeys":["getSpaceport","inline fun <Error class: unknown class>.getSpaceport(): <Error class: unknown class>","org.magiclib.kotlin.getSpaceport"]},{"name":"inline fun <Error class: unknown class>.getSpawnFPMult(): <Error class: unknown class>","description":"org.magiclib.kotlin.getSpawnFPMult","location":"magiclib/org.magiclib.kotlin/get-spawn-f-p-mult.html","searchKeys":["getSpawnFPMult","inline fun <Error class: unknown class>.getSpawnFPMult(): <Error class: unknown class>","org.magiclib.kotlin.getSpawnFPMult"]},{"name":"inline fun <Error class: unknown class>.getStabilizeMarketPlugin(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStabilizeMarketPlugin","location":"magiclib/org.magiclib.kotlin/get-stabilize-market-plugin.html","searchKeys":["getStabilizeMarketPlugin","inline fun <Error class: unknown class>.getStabilizeMarketPlugin(): <Error class: unknown class>","org.magiclib.kotlin.getStabilizeMarketPlugin"]},{"name":"inline fun <Error class: unknown class>.getStarId(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStarId","location":"magiclib/org.magiclib.kotlin/get-star-id.html","searchKeys":["getStarId","inline fun <Error class: unknown class>.getStarId(): <Error class: unknown class>","org.magiclib.kotlin.getStarId"]},{"name":"inline fun <Error class: unknown class>.getStarSystemForAnchor(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStarSystemForAnchor","location":"magiclib/org.magiclib.kotlin/get-star-system-for-anchor.html","searchKeys":["getStarSystemForAnchor","inline fun <Error class: unknown class>.getStarSystemForAnchor(): <Error class: unknown class>","org.magiclib.kotlin.getStarSystemForAnchor"]},{"name":"inline fun <Error class: unknown class>.getStationBaseFleet(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStationBaseFleet","location":"magiclib/org.magiclib.kotlin/get-station-base-fleet.html","searchKeys":["getStationBaseFleet","inline fun <Error class: unknown class>.getStationBaseFleet(): <Error class: unknown class>","org.magiclib.kotlin.getStationBaseFleet"]},{"name":"inline fun <Error class: unknown class>.getStationBaseFleet(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStationBaseFleet","location":"magiclib/org.magiclib.kotlin/get-station-base-fleet.html","searchKeys":["getStationBaseFleet","inline fun <Error class: unknown class>.getStationBaseFleet(): <Error class: unknown class>","org.magiclib.kotlin.getStationBaseFleet"]},{"name":"inline fun <Error class: unknown class>.getStationFleet(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStationFleet","location":"magiclib/org.magiclib.kotlin/get-station-fleet.html","searchKeys":["getStationFleet","inline fun <Error class: unknown class>.getStationFleet(): <Error class: unknown class>","org.magiclib.kotlin.getStationFleet"]},{"name":"inline fun <Error class: unknown class>.getStationFleet(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStationFleet","location":"magiclib/org.magiclib.kotlin/get-station-fleet.html","searchKeys":["getStationFleet","inline fun <Error class: unknown class>.getStationFleet(): <Error class: unknown class>","org.magiclib.kotlin.getStationFleet"]},{"name":"inline fun <Error class: unknown class>.getStationIndustry(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStationIndustry","location":"magiclib/org.magiclib.kotlin/get-station-industry.html","searchKeys":["getStationIndustry","inline fun <Error class: unknown class>.getStationIndustry(): <Error class: unknown class>","org.magiclib.kotlin.getStationIndustry"]},{"name":"inline fun <Error class: unknown class>.getStationMarket(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStationMarket","location":"magiclib/org.magiclib.kotlin/get-station-market.html","searchKeys":["getStationMarket","inline fun <Error class: unknown class>.getStationMarket(): <Error class: unknown class>","org.magiclib.kotlin.getStationMarket"]},{"name":"inline fun <Error class: unknown class>.getStorage(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStorage","location":"magiclib/org.magiclib.kotlin/get-storage.html","searchKeys":["getStorage","inline fun <Error class: unknown class>.getStorage(): <Error class: unknown class>","org.magiclib.kotlin.getStorage"]},{"name":"inline fun <Error class: unknown class>.getStorageCargo(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStorageCargo","location":"magiclib/org.magiclib.kotlin/get-storage-cargo.html","searchKeys":["getStorageCargo","inline fun <Error class: unknown class>.getStorageCargo(): <Error class: unknown class>","org.magiclib.kotlin.getStorageCargo"]},{"name":"inline fun <Error class: unknown class>.getStorageCargoValue(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStorageCargoValue","location":"magiclib/org.magiclib.kotlin/get-storage-cargo-value.html","searchKeys":["getStorageCargoValue","inline fun <Error class: unknown class>.getStorageCargoValue(): <Error class: unknown class>","org.magiclib.kotlin.getStorageCargoValue"]},{"name":"inline fun <Error class: unknown class>.getStorageCostPerMonth(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStorageCostPerMonth","location":"magiclib/org.magiclib.kotlin/get-storage-cost-per-month.html","searchKeys":["getStorageCostPerMonth","inline fun <Error class: unknown class>.getStorageCostPerMonth(): <Error class: unknown class>","org.magiclib.kotlin.getStorageCostPerMonth"]},{"name":"inline fun <Error class: unknown class>.getStorageShipValue(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStorageShipValue","location":"magiclib/org.magiclib.kotlin/get-storage-ship-value.html","searchKeys":["getStorageShipValue","inline fun <Error class: unknown class>.getStorageShipValue(): <Error class: unknown class>","org.magiclib.kotlin.getStorageShipValue"]},{"name":"inline fun <Error class: unknown class>.getStorageTotalValue(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStorageTotalValue","location":"magiclib/org.magiclib.kotlin/get-storage-total-value.html","searchKeys":["getStorageTotalValue","inline fun <Error class: unknown class>.getStorageTotalValue(): <Error class: unknown class>","org.magiclib.kotlin.getStorageTotalValue"]},{"name":"inline fun <Error class: unknown class>.getSurveyLevelString(withBrackets: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.getSurveyLevelString","location":"magiclib/org.magiclib.kotlin/get-survey-level-string.html","searchKeys":["getSurveyLevelString","inline fun <Error class: unknown class>.getSurveyLevelString(withBrackets: Boolean): <Error class: unknown class>","org.magiclib.kotlin.getSurveyLevelString"]},{"name":"inline fun <Error class: unknown class>.getSystemJumpPointHyperExitLocation(): <Error class: unknown class>","description":"org.magiclib.kotlin.getSystemJumpPointHyperExitLocation","location":"magiclib/org.magiclib.kotlin/get-system-jump-point-hyper-exit-location.html","searchKeys":["getSystemJumpPointHyperExitLocation","inline fun <Error class: unknown class>.getSystemJumpPointHyperExitLocation(): <Error class: unknown class>","org.magiclib.kotlin.getSystemJumpPointHyperExitLocation"]},{"name":"inline fun <Error class: unknown class>.getSystemsInRange(exclude: Set<<Error class: unknown class>>, nonEmpty: Boolean, maxRange: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.getSystemsInRange","location":"magiclib/org.magiclib.kotlin/get-systems-in-range.html","searchKeys":["getSystemsInRange","inline fun <Error class: unknown class>.getSystemsInRange(exclude: Set<<Error class: unknown class>>, nonEmpty: Boolean, maxRange: Float): <Error class: unknown class>","org.magiclib.kotlin.getSystemsInRange"]},{"name":"inline fun <Error class: unknown class>.getTargetingRadius(from: <Error class: unknown class>, considerShield: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.getTargetingRadius","location":"magiclib/org.magiclib.kotlin/get-targeting-radius.html","searchKeys":["getTargetingRadius","inline fun <Error class: unknown class>.getTargetingRadius(from: <Error class: unknown class>, considerShield: Boolean): <Error class: unknown class>","org.magiclib.kotlin.getTargetingRadius"]},{"name":"inline fun <Error class: unknown class>.getTerrainName(): <Error class: unknown class>","description":"org.magiclib.kotlin.getTerrainName","location":"magiclib/org.magiclib.kotlin/get-terrain-name.html","searchKeys":["getTerrainName","inline fun <Error class: unknown class>.getTerrainName(): <Error class: unknown class>","org.magiclib.kotlin.getTerrainName"]},{"name":"inline fun <Error class: unknown class>.getTerrainNameAOrAn(): <Error class: unknown class>","description":"org.magiclib.kotlin.getTerrainNameAOrAn","location":"magiclib/org.magiclib.kotlin/get-terrain-name-a-or-an.html","searchKeys":["getTerrainNameAOrAn","inline fun <Error class: unknown class>.getTerrainNameAOrAn(): <Error class: unknown class>","org.magiclib.kotlin.getTerrainNameAOrAn"]},{"name":"inline fun <Error class: unknown class>.getTerrainType(): <Error class: unknown class>","description":"org.magiclib.kotlin.getTerrainType","location":"magiclib/org.magiclib.kotlin/get-terrain-type.html","searchKeys":["getTerrainType","inline fun <Error class: unknown class>.getTerrainType(): <Error class: unknown class>","org.magiclib.kotlin.getTerrainType"]},{"name":"inline fun <Error class: unknown class>.getTradeMode(): <Error class: unknown class>","description":"org.magiclib.kotlin.getTradeMode","location":"magiclib/org.magiclib.kotlin/get-trade-mode.html","searchKeys":["getTradeMode","inline fun <Error class: unknown class>.getTradeMode(): <Error class: unknown class>","org.magiclib.kotlin.getTradeMode"]},{"name":"inline fun <Error class: unknown class>.getUnitVector(to: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getUnitVector","location":"magiclib/org.magiclib.kotlin/get-unit-vector.html","searchKeys":["getUnitVector","inline fun <Error class: unknown class>.getUnitVector(to: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getUnitVector"]},{"name":"inline fun <Error class: unknown class>.getVisibleFleets(includeSensorContacts: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.getVisibleFleets","location":"magiclib/org.magiclib.kotlin/get-visible-fleets.html","searchKeys":["getVisibleFleets","inline fun <Error class: unknown class>.getVisibleFleets(includeSensorContacts: Boolean): <Error class: unknown class>","org.magiclib.kotlin.getVisibleFleets"]},{"name":"inline fun <Error class: unknown class>.giveStandardReturnAssignments(where: <Error class: unknown class>, text: String, withClear: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.giveStandardReturnAssignments","location":"magiclib/org.magiclib.kotlin/give-standard-return-assignments.html","searchKeys":["giveStandardReturnAssignments","inline fun <Error class: unknown class>.giveStandardReturnAssignments(where: <Error class: unknown class>, text: String, withClear: Boolean): <Error class: unknown class>","org.magiclib.kotlin.giveStandardReturnAssignments"]},{"name":"inline fun <Error class: unknown class>.giveStandardReturnToSourceAssignments(withClear: Boolean = true): <Error class: unknown class>","description":"org.magiclib.kotlin.giveStandardReturnToSourceAssignments","location":"magiclib/org.magiclib.kotlin/give-standard-return-to-source-assignments.html","searchKeys":["giveStandardReturnToSourceAssignments","inline fun <Error class: unknown class>.giveStandardReturnToSourceAssignments(withClear: Boolean = true): <Error class: unknown class>","org.magiclib.kotlin.giveStandardReturnToSourceAssignments"]},{"name":"inline fun <Error class: unknown class>.hasAnySurveyDataFor(): <Error class: unknown class>","description":"org.magiclib.kotlin.hasAnySurveyDataFor","location":"magiclib/org.magiclib.kotlin/has-any-survey-data-for.html","searchKeys":["hasAnySurveyDataFor","inline fun <Error class: unknown class>.hasAnySurveyDataFor(): <Error class: unknown class>","org.magiclib.kotlin.hasAnySurveyDataFor"]},{"name":"inline fun <Error class: unknown class>.hasFarmland(): <Error class: unknown class>","description":"org.magiclib.kotlin.hasFarmland","location":"magiclib/org.magiclib.kotlin/has-farmland.html","searchKeys":["hasFarmland","inline fun <Error class: unknown class>.hasFarmland(): <Error class: unknown class>","org.magiclib.kotlin.hasFarmland"]},{"name":"inline fun <Error class: unknown class>.hasHeavyIndustry(): <Error class: unknown class>","description":"org.magiclib.kotlin.hasHeavyIndustry","location":"magiclib/org.magiclib.kotlin/has-heavy-industry.html","searchKeys":["hasHeavyIndustry","inline fun <Error class: unknown class>.hasHeavyIndustry(): <Error class: unknown class>","org.magiclib.kotlin.hasHeavyIndustry"]},{"name":"inline fun <Error class: unknown class>.hasOrbitalStation(): <Error class: unknown class>","description":"org.magiclib.kotlin.hasOrbitalStation","location":"magiclib/org.magiclib.kotlin/has-orbital-station.html","searchKeys":["hasOrbitalStation","inline fun <Error class: unknown class>.hasOrbitalStation(): <Error class: unknown class>","org.magiclib.kotlin.hasOrbitalStation"]},{"name":"inline fun <Error class: unknown class>.hasRuins(): <Error class: unknown class>","description":"org.magiclib.kotlin.hasRuins","location":"magiclib/org.magiclib.kotlin/has-ruins.html","searchKeys":["hasRuins","inline fun <Error class: unknown class>.hasRuins(): <Error class: unknown class>","org.magiclib.kotlin.hasRuins"]},{"name":"inline fun <Error class: unknown class>.hasSpecialName(): <Error class: unknown class>","description":"org.magiclib.kotlin.hasSpecialName","location":"magiclib/org.magiclib.kotlin/has-special-name.html","searchKeys":["hasSpecialName","inline fun <Error class: unknown class>.hasSpecialName(): <Error class: unknown class>","org.magiclib.kotlin.hasSpecialName"]},{"name":"inline fun <Error class: unknown class>.hasUnexploredRuins(): <Error class: unknown class>","description":"org.magiclib.kotlin.hasUnexploredRuins","location":"magiclib/org.magiclib.kotlin/has-unexplored-ruins.html","searchKeys":["hasUnexploredRuins","inline fun <Error class: unknown class>.hasUnexploredRuins(): <Error class: unknown class>","org.magiclib.kotlin.hasUnexploredRuins"]},{"name":"inline fun <Error class: unknown class>.increaseMarketHostileTimeout(days: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.increaseMarketHostileTimeout","location":"magiclib/org.magiclib.kotlin/increase-market-hostile-timeout.html","searchKeys":["increaseMarketHostileTimeout","inline fun <Error class: unknown class>.increaseMarketHostileTimeout(days: Float): <Error class: unknown class>","org.magiclib.kotlin.increaseMarketHostileTimeout"]},{"name":"inline fun <Error class: unknown class>.initConditionMarket(): <Error class: unknown class>","description":"org.magiclib.kotlin.initConditionMarket","location":"magiclib/org.magiclib.kotlin/init-condition-market.html","searchKeys":["initConditionMarket","inline fun <Error class: unknown class>.initConditionMarket(): <Error class: unknown class>","org.magiclib.kotlin.initConditionMarket"]},{"name":"inline fun <Error class: unknown class>.initEconomyMarket(): <Error class: unknown class>","description":"org.magiclib.kotlin.initEconomyMarket","location":"magiclib/org.magiclib.kotlin/init-economy-market.html","searchKeys":["initEconomyMarket","inline fun <Error class: unknown class>.initEconomyMarket(): <Error class: unknown class>","org.magiclib.kotlin.initEconomyMarket"]},{"name":"inline fun <Error class: unknown class>.interpolateVector(to: <Error class: unknown class>, progress: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.interpolateVector","location":"magiclib/org.magiclib.kotlin/interpolate-vector.html","searchKeys":["interpolateVector","inline fun <Error class: unknown class>.interpolateVector(to: <Error class: unknown class>, progress: Float): <Error class: unknown class>","org.magiclib.kotlin.interpolateVector"]},{"name":"inline fun <Error class: unknown class>.interruptAbilitiesWithTag(tag: String): <Error class: unknown class>","description":"org.magiclib.kotlin.interruptAbilitiesWithTag","location":"magiclib/org.magiclib.kotlin/interrupt-abilities-with-tag.html","searchKeys":["interruptAbilitiesWithTag","inline fun <Error class: unknown class>.interruptAbilitiesWithTag(tag: String): <Error class: unknown class>","org.magiclib.kotlin.interruptAbilitiesWithTag"]},{"name":"inline fun <Error class: unknown class>.isActiveModule(): <Error class: unknown class>","description":"org.magiclib.kotlin.isActiveModule","location":"magiclib/org.magiclib.kotlin/is-active-module.html","searchKeys":["isActiveModule","inline fun <Error class: unknown class>.isActiveModule(): <Error class: unknown class>","org.magiclib.kotlin.isActiveModule"]},{"name":"inline fun <Error class: unknown class>.isActiveModule(): <Error class: unknown class>","description":"org.magiclib.kotlin.isActiveModule","location":"magiclib/org.magiclib.kotlin/is-active-module.html","searchKeys":["isActiveModule","inline fun <Error class: unknown class>.isActiveModule(): <Error class: unknown class>","org.magiclib.kotlin.isActiveModule"]},{"name":"inline fun <Error class: unknown class>.isAutomated(): <Error class: unknown class>","description":"org.magiclib.kotlin.isAutomated","location":"magiclib/org.magiclib.kotlin/is-automated.html","searchKeys":["isAutomated","inline fun <Error class: unknown class>.isAutomated(): <Error class: unknown class>","org.magiclib.kotlin.isAutomated"]},{"name":"inline fun <Error class: unknown class>.isAutomated(): <Error class: unknown class>","description":"org.magiclib.kotlin.isAutomated","location":"magiclib/org.magiclib.kotlin/is-automated.html","searchKeys":["isAutomated","inline fun <Error class: unknown class>.isAutomated(): <Error class: unknown class>","org.magiclib.kotlin.isAutomated"]},{"name":"inline fun <Error class: unknown class>.isAutomated(): <Error class: unknown class>","description":"org.magiclib.kotlin.isAutomated","location":"magiclib/org.magiclib.kotlin/is-automated.html","searchKeys":["isAutomated","inline fun <Error class: unknown class>.isAutomated(): <Error class: unknown class>","org.magiclib.kotlin.isAutomated"]},{"name":"inline fun <Error class: unknown class>.isAutomated(): <Error class: unknown class>","description":"org.magiclib.kotlin.isAutomated","location":"magiclib/org.magiclib.kotlin/is-automated.html","searchKeys":["isAutomated","inline fun <Error class: unknown class>.isAutomated(): <Error class: unknown class>","org.magiclib.kotlin.isAutomated"]},{"name":"inline fun <Error class: unknown class>.isAvoidingPlayerHalfheartedly(): <Error class: unknown class>","description":"org.magiclib.kotlin.isAvoidingPlayerHalfheartedly","location":"magiclib/org.magiclib.kotlin/is-avoiding-player-halfheartedly.html","searchKeys":["isAvoidingPlayerHalfheartedly","inline fun <Error class: unknown class>.isAvoidingPlayerHalfheartedly(): <Error class: unknown class>","org.magiclib.kotlin.isAvoidingPlayerHalfheartedly"]},{"name":"inline fun <Error class: unknown class>.isBusy(): <Error class: unknown class>","description":"org.magiclib.kotlin.isBusy","location":"magiclib/org.magiclib.kotlin/is-busy.html","searchKeys":["isBusy","inline fun <Error class: unknown class>.isBusy(): <Error class: unknown class>","org.magiclib.kotlin.isBusy"]},{"name":"inline fun <Error class: unknown class>.isDecentralized(): <Error class: unknown class>","description":"org.magiclib.kotlin.isDecentralized","location":"magiclib/org.magiclib.kotlin/is-decentralized.html","searchKeys":["isDecentralized","inline fun <Error class: unknown class>.isDecentralized(): <Error class: unknown class>","org.magiclib.kotlin.isDecentralized"]},{"name":"inline fun <Error class: unknown class>.isHyperspaceAnchor(): <Error class: unknown class>","description":"org.magiclib.kotlin.isHyperspaceAnchor","location":"magiclib/org.magiclib.kotlin/is-hyperspace-anchor.html","searchKeys":["isHyperspaceAnchor","inline fun <Error class: unknown class>.isHyperspaceAnchor(): <Error class: unknown class>","org.magiclib.kotlin.isHyperspaceAnchor"]},{"name":"inline fun <Error class: unknown class>.isImportantForReason(reason: String): <Error class: unknown class>","description":"org.magiclib.kotlin.isImportantForReason","location":"magiclib/org.magiclib.kotlin/is-important-for-reason.html","searchKeys":["isImportantForReason","inline fun <Error class: unknown class>.isImportantForReason(reason: String): <Error class: unknown class>","org.magiclib.kotlin.isImportantForReason"]},{"name":"inline fun <Error class: unknown class>.isInsideSlipstream(): <Error class: unknown class>","description":"org.magiclib.kotlin.isInsideSlipstream","location":"magiclib/org.magiclib.kotlin/is-inside-slipstream.html","searchKeys":["isInsideSlipstream","inline fun <Error class: unknown class>.isInsideSlipstream(): <Error class: unknown class>","org.magiclib.kotlin.isInsideSlipstream"]},{"name":"inline fun <Error class: unknown class>.isInsideSlipstream(radius: Float, location: <Error class: unknown class> = Global.getSector().hyperspace): <Error class: unknown class>","description":"org.magiclib.kotlin.isInsideSlipstream","location":"magiclib/org.magiclib.kotlin/is-inside-slipstream.html","searchKeys":["isInsideSlipstream","inline fun <Error class: unknown class>.isInsideSlipstream(radius: Float, location: <Error class: unknown class> = Global.getSector().hyperspace): <Error class: unknown class>","org.magiclib.kotlin.isInsideSlipstream"]},{"name":"inline fun <Error class: unknown class>.isInsignificant(): <Error class: unknown class>","description":"org.magiclib.kotlin.isInsignificant","location":"magiclib/org.magiclib.kotlin/is-insignificant.html","searchKeys":["isInsignificant","inline fun <Error class: unknown class>.isInsignificant(): <Error class: unknown class>","org.magiclib.kotlin.isInsignificant"]},{"name":"inline fun <Error class: unknown class>.isMentored(): <Error class: unknown class>","description":"org.magiclib.kotlin.isMentored","location":"magiclib/org.magiclib.kotlin/is-mentored.html","searchKeys":["isMentored","inline fun <Error class: unknown class>.isMentored(): <Error class: unknown class>","org.magiclib.kotlin.isMentored"]},{"name":"inline fun <Error class: unknown class>.isMercenary(): <Error class: unknown class>","description":"org.magiclib.kotlin.isMercenary","location":"magiclib/org.magiclib.kotlin/is-mercenary.html","searchKeys":["isMercenary","inline fun <Error class: unknown class>.isMercenary(): <Error class: unknown class>","org.magiclib.kotlin.isMercenary"]},{"name":"inline fun <Error class: unknown class>.isMilitary(): <Error class: unknown class>","description":"org.magiclib.kotlin.isMilitary","location":"magiclib/org.magiclib.kotlin/is-military.html","searchKeys":["isMilitary","inline fun <Error class: unknown class>.isMilitary(): <Error class: unknown class>","org.magiclib.kotlin.isMilitary"]},{"name":"inline fun <Error class: unknown class>.isNear(hyperLoc: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.isNear","location":"magiclib/org.magiclib.kotlin/is-near.html","searchKeys":["isNear","inline fun <Error class: unknown class>.isNear(hyperLoc: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.isNear"]},{"name":"inline fun <Error class: unknown class>.isNearCorona(loc: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.isNearCorona","location":"magiclib/org.magiclib.kotlin/is-near-corona.html","searchKeys":["isNearCorona","inline fun <Error class: unknown class>.isNearCorona(loc: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.isNearCorona"]},{"name":"inline fun <Error class: unknown class>.isOpenlyPopulated(): <Error class: unknown class>","description":"org.magiclib.kotlin.isOpenlyPopulated","location":"magiclib/org.magiclib.kotlin/is-openly-populated.html","searchKeys":["isOpenlyPopulated","inline fun <Error class: unknown class>.isOpenlyPopulated(): <Error class: unknown class>","org.magiclib.kotlin.isOpenlyPopulated"]},{"name":"inline fun <Error class: unknown class>.isOutsideSector(): <Error class: unknown class>","description":"org.magiclib.kotlin.isOutsideSector","location":"magiclib/org.magiclib.kotlin/is-outside-sector.html","searchKeys":["isOutsideSector","inline fun <Error class: unknown class>.isOutsideSector(): <Error class: unknown class>","org.magiclib.kotlin.isOutsideSector"]},{"name":"inline fun <Error class: unknown class>.isPatrol(): <Error class: unknown class>","description":"org.magiclib.kotlin.isPatrol","location":"magiclib/org.magiclib.kotlin/is-patrol.html","searchKeys":["isPatrol","inline fun <Error class: unknown class>.isPatrol(): <Error class: unknown class>","org.magiclib.kotlin.isPatrol"]},{"name":"inline fun <Error class: unknown class>.isPermaKnowsWhoPlayerIs(): <Error class: unknown class>","description":"org.magiclib.kotlin.isPermaKnowsWhoPlayerIs","location":"magiclib/org.magiclib.kotlin/is-perma-knows-who-player-is.html","searchKeys":["isPermaKnowsWhoPlayerIs","inline fun <Error class: unknown class>.isPermaKnowsWhoPlayerIs(): <Error class: unknown class>","org.magiclib.kotlin.isPermaKnowsWhoPlayerIs"]},{"name":"inline fun <Error class: unknown class>.isPirate(): <Error class: unknown class>","description":"org.magiclib.kotlin.isPirate","location":"magiclib/org.magiclib.kotlin/is-pirate.html","searchKeys":["isPirate","inline fun <Error class: unknown class>.isPirate(): <Error class: unknown class>","org.magiclib.kotlin.isPirate"]},{"name":"inline fun <Error class: unknown class>.isPirateFaction(): <Error class: unknown class>","description":"org.magiclib.kotlin.isPirateFaction","location":"magiclib/org.magiclib.kotlin/is-pirate-faction.html","searchKeys":["isPirateFaction","inline fun <Error class: unknown class>.isPirateFaction(): <Error class: unknown class>","org.magiclib.kotlin.isPirateFaction"]},{"name":"inline fun <Error class: unknown class>.isPlayerOrCombinedContainingPlayer(): <Error class: unknown class>","description":"org.magiclib.kotlin.isPlayerOrCombinedContainingPlayer","location":"magiclib/org.magiclib.kotlin/is-player-or-combined-containing-player.html","searchKeys":["isPlayerOrCombinedContainingPlayer","inline fun <Error class: unknown class>.isPlayerOrCombinedContainingPlayer(): <Error class: unknown class>","org.magiclib.kotlin.isPlayerOrCombinedContainingPlayer"]},{"name":"inline fun <Error class: unknown class>.isPlayerOrCombinedPlayerPrimary(): <Error class: unknown class>","description":"org.magiclib.kotlin.isPlayerOrCombinedPlayerPrimary","location":"magiclib/org.magiclib.kotlin/is-player-or-combined-player-primary.html","searchKeys":["isPlayerOrCombinedPlayerPrimary","inline fun <Error class: unknown class>.isPlayerOrCombinedPlayerPrimary(): <Error class: unknown class>","org.magiclib.kotlin.isPlayerOrCombinedPlayerPrimary"]},{"name":"inline fun <Error class: unknown class>.isPointInBounds(bounds: List<<Error class: unknown class>>): <Error class: unknown class>","description":"org.magiclib.kotlin.isPointInBounds","location":"magiclib/org.magiclib.kotlin/is-point-in-bounds.html","searchKeys":["isPointInBounds","inline fun <Error class: unknown class>.isPointInBounds(bounds: List<<Error class: unknown class>>): <Error class: unknown class>","org.magiclib.kotlin.isPointInBounds"]},{"name":"inline fun <Error class: unknown class>.isRaider(): <Error class: unknown class>","description":"org.magiclib.kotlin.isRaider","location":"magiclib/org.magiclib.kotlin/is-raider.html","searchKeys":["isRaider","inline fun <Error class: unknown class>.isRaider(): <Error class: unknown class>","org.magiclib.kotlin.isRaider"]},{"name":"inline fun <Error class: unknown class>.isSameCargo(other: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.isSameCargo","location":"magiclib/org.magiclib.kotlin/is-same-cargo.html","searchKeys":["isSameCargo","inline fun <Error class: unknown class>.isSameCargo(other: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.isSameCargo"]},{"name":"inline fun <Error class: unknown class>.isScavenger(): <Error class: unknown class>","description":"org.magiclib.kotlin.isScavenger","location":"magiclib/org.magiclib.kotlin/is-scavenger.html","searchKeys":["isScavenger","inline fun <Error class: unknown class>.isScavenger(): <Error class: unknown class>","org.magiclib.kotlin.isScavenger"]},{"name":"inline fun <Error class: unknown class>.isShipRecoverable(recoverer: <Error class: unknown class>?, own: Boolean, useOfficerRecovery: Boolean, chanceMult: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.isShipRecoverable","location":"magiclib/org.magiclib.kotlin/is-ship-recoverable.html","searchKeys":["isShipRecoverable","inline fun <Error class: unknown class>.isShipRecoverable(recoverer: <Error class: unknown class>?, own: Boolean, useOfficerRecovery: Boolean, chanceMult: Float): <Error class: unknown class>","org.magiclib.kotlin.isShipRecoverable"]},{"name":"inline fun <Error class: unknown class>.isSlowMoving(): <Error class: unknown class>","description":"org.magiclib.kotlin.isSlowMoving","location":"magiclib/org.magiclib.kotlin/is-slow-moving.html","searchKeys":["isSlowMoving","inline fun <Error class: unknown class>.isSlowMoving(): <Error class: unknown class>","org.magiclib.kotlin.isSlowMoving"]},{"name":"inline fun <Error class: unknown class>.isSmuggler(): <Error class: unknown class>","description":"org.magiclib.kotlin.isSmuggler","location":"magiclib/org.magiclib.kotlin/is-smuggler.html","searchKeys":["isSmuggler","inline fun <Error class: unknown class>.isSmuggler(): <Error class: unknown class>","org.magiclib.kotlin.isSmuggler"]},{"name":"inline fun <Error class: unknown class>.isSpecialMod(spec: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.isSpecialMod","location":"magiclib/org.magiclib.kotlin/is-special-mod.html","searchKeys":["isSpecialMod","inline fun <Error class: unknown class>.isSpecialMod(spec: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.isSpecialMod"]},{"name":"inline fun <Error class: unknown class>.isStationInSupportRange(station: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.isStationInSupportRange","location":"magiclib/org.magiclib.kotlin/is-station-in-support-range.html","searchKeys":["isStationInSupportRange","inline fun <Error class: unknown class>.isStationInSupportRange(station: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.isStationInSupportRange"]},{"name":"inline fun <Error class: unknown class>.isStoryCritical(): <Error class: unknown class>","description":"org.magiclib.kotlin.isStoryCritical","location":"magiclib/org.magiclib.kotlin/is-story-critical.html","searchKeys":["isStoryCritical","inline fun <Error class: unknown class>.isStoryCritical(): <Error class: unknown class>","org.magiclib.kotlin.isStoryCritical"]},{"name":"inline fun <Error class: unknown class>.isStoryCritical(): <Error class: unknown class>","description":"org.magiclib.kotlin.isStoryCritical","location":"magiclib/org.magiclib.kotlin/is-story-critical.html","searchKeys":["isStoryCritical","inline fun <Error class: unknown class>.isStoryCritical(): <Error class: unknown class>","org.magiclib.kotlin.isStoryCritical"]},{"name":"inline fun <Error class: unknown class>.isTrader(): <Error class: unknown class>","description":"org.magiclib.kotlin.isTrader","location":"magiclib/org.magiclib.kotlin/is-trader.html","searchKeys":["isTrader","inline fun <Error class: unknown class>.isTrader(): <Error class: unknown class>","org.magiclib.kotlin.isTrader"]},{"name":"inline fun <Error class: unknown class>.isUnboardable(): <Error class: unknown class>","description":"org.magiclib.kotlin.isUnboardable","location":"magiclib/org.magiclib.kotlin/is-unboardable.html","searchKeys":["isUnboardable","inline fun <Error class: unknown class>.isUnboardable(): <Error class: unknown class>","org.magiclib.kotlin.isUnboardable"]},{"name":"inline fun <Error class: unknown class>.isUnboardable(): <Error class: unknown class>","description":"org.magiclib.kotlin.isUnboardable","location":"magiclib/org.magiclib.kotlin/is-unboardable.html","searchKeys":["isUnboardable","inline fun <Error class: unknown class>.isUnboardable(): <Error class: unknown class>","org.magiclib.kotlin.isUnboardable"]},{"name":"inline fun <Error class: unknown class>.isUnremovable(): <Error class: unknown class>","description":"org.magiclib.kotlin.isUnremovable","location":"magiclib/org.magiclib.kotlin/is-unremovable.html","searchKeys":["isUnremovable","inline fun <Error class: unknown class>.isUnremovable(): <Error class: unknown class>","org.magiclib.kotlin.isUnremovable"]},{"name":"inline fun <Error class: unknown class>.isWarFleet(): <Error class: unknown class>","description":"org.magiclib.kotlin.isWarFleet","location":"magiclib/org.magiclib.kotlin/is-war-fleet.html","searchKeys":["isWarFleet","inline fun <Error class: unknown class>.isWarFleet(): <Error class: unknown class>","org.magiclib.kotlin.isWarFleet"]},{"name":"inline fun <Error class: unknown class>.makeHostile(): <Error class: unknown class>","description":"org.magiclib.kotlin.makeHostile","location":"magiclib/org.magiclib.kotlin/make-hostile.html","searchKeys":["makeHostile","inline fun <Error class: unknown class>.makeHostile(): <Error class: unknown class>","org.magiclib.kotlin.makeHostile"]},{"name":"inline fun <Error class: unknown class>.makeImportant(reason: String, dur: Float = -1f): <Error class: unknown class>","description":"org.magiclib.kotlin.makeImportant","location":"magiclib/org.magiclib.kotlin/make-important.html","searchKeys":["makeImportant","inline fun <Error class: unknown class>.makeImportant(reason: String, dur: Float = -1f): <Error class: unknown class>","org.magiclib.kotlin.makeImportant"]},{"name":"inline fun <Error class: unknown class>.makeImportant(reason: String, dur: Float = -1f): <Error class: unknown class>","description":"org.magiclib.kotlin.makeImportant","location":"magiclib/org.magiclib.kotlin/make-important.html","searchKeys":["makeImportant","inline fun <Error class: unknown class>.makeImportant(reason: String, dur: Float = -1f): <Error class: unknown class>","org.magiclib.kotlin.makeImportant"]},{"name":"inline fun <Error class: unknown class>.makeImportant(reason: String, dur: Float = -1f): <Error class: unknown class>","description":"org.magiclib.kotlin.makeImportant","location":"magiclib/org.magiclib.kotlin/make-important.html","searchKeys":["makeImportant","inline fun <Error class: unknown class>.makeImportant(reason: String, dur: Float = -1f): <Error class: unknown class>","org.magiclib.kotlin.makeImportant"]},{"name":"inline fun <Error class: unknown class>.makeLowRepImpact(reason: String): <Error class: unknown class>","description":"org.magiclib.kotlin.makeLowRepImpact","location":"magiclib/org.magiclib.kotlin/make-low-rep-impact.html","searchKeys":["makeLowRepImpact","inline fun <Error class: unknown class>.makeLowRepImpact(reason: String): <Error class: unknown class>","org.magiclib.kotlin.makeLowRepImpact"]},{"name":"inline fun <Error class: unknown class>.makeNoRepImpact(reason: String): <Error class: unknown class>","description":"org.magiclib.kotlin.makeNoRepImpact","location":"magiclib/org.magiclib.kotlin/make-no-rep-impact.html","searchKeys":["makeNoRepImpact","inline fun <Error class: unknown class>.makeNoRepImpact(reason: String): <Error class: unknown class>","org.magiclib.kotlin.makeNoRepImpact"]},{"name":"inline fun <Error class: unknown class>.makeNonStoryCritical(reason: String): <Error class: unknown class>","description":"org.magiclib.kotlin.makeNonStoryCritical","location":"magiclib/org.magiclib.kotlin/make-non-story-critical.html","searchKeys":["makeNonStoryCritical","inline fun <Error class: unknown class>.makeNonStoryCritical(reason: String): <Error class: unknown class>","org.magiclib.kotlin.makeNonStoryCritical"]},{"name":"inline fun <Error class: unknown class>.makeNonStoryCritical(reason: String): <Error class: unknown class>","description":"org.magiclib.kotlin.makeNonStoryCritical","location":"magiclib/org.magiclib.kotlin/make-non-story-critical.html","searchKeys":["makeNonStoryCritical","inline fun <Error class: unknown class>.makeNonStoryCritical(reason: String): <Error class: unknown class>","org.magiclib.kotlin.makeNonStoryCritical"]},{"name":"inline fun <Error class: unknown class>.makeNotLowRepImpact(reason: String): <Error class: unknown class>","description":"org.magiclib.kotlin.makeNotLowRepImpact","location":"magiclib/org.magiclib.kotlin/make-not-low-rep-impact.html","searchKeys":["makeNotLowRepImpact","inline fun <Error class: unknown class>.makeNotLowRepImpact(reason: String): <Error class: unknown class>","org.magiclib.kotlin.makeNotLowRepImpact"]},{"name":"inline fun <Error class: unknown class>.makeStoryCritical(reason: String): <Error class: unknown class>","description":"org.magiclib.kotlin.makeStoryCritical","location":"magiclib/org.magiclib.kotlin/make-story-critical.html","searchKeys":["makeStoryCritical","inline fun <Error class: unknown class>.makeStoryCritical(reason: String): <Error class: unknown class>","org.magiclib.kotlin.makeStoryCritical"]},{"name":"inline fun <Error class: unknown class>.makeStoryCritical(reason: String): <Error class: unknown class>","description":"org.magiclib.kotlin.makeStoryCritical","location":"magiclib/org.magiclib.kotlin/make-story-critical.html","searchKeys":["makeStoryCritical","inline fun <Error class: unknown class>.makeStoryCritical(reason: String): <Error class: unknown class>","org.magiclib.kotlin.makeStoryCritical"]},{"name":"inline fun <Error class: unknown class>.makeUnimportant(reason: String): <Error class: unknown class>","description":"org.magiclib.kotlin.makeUnimportant","location":"magiclib/org.magiclib.kotlin/make-unimportant.html","searchKeys":["makeUnimportant","inline fun <Error class: unknown class>.makeUnimportant(reason: String): <Error class: unknown class>","org.magiclib.kotlin.makeUnimportant"]},{"name":"inline fun <Error class: unknown class>.makeUnimportant(reason: String): <Error class: unknown class>","description":"org.magiclib.kotlin.makeUnimportant","location":"magiclib/org.magiclib.kotlin/make-unimportant.html","searchKeys":["makeUnimportant","inline fun <Error class: unknown class>.makeUnimportant(reason: String): <Error class: unknown class>","org.magiclib.kotlin.makeUnimportant"]},{"name":"inline fun <Error class: unknown class>.makeUnimportant(reason: String): <Error class: unknown class>","description":"org.magiclib.kotlin.makeUnimportant","location":"magiclib/org.magiclib.kotlin/make-unimportant.html","searchKeys":["makeUnimportant","inline fun <Error class: unknown class>.makeUnimportant(reason: String): <Error class: unknown class>","org.magiclib.kotlin.makeUnimportant"]},{"name":"inline fun <Error class: unknown class>.moveToMarket(destination: <Error class: unknown class>, alwaysAddToCommDirectory: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.moveToMarket","location":"magiclib/org.magiclib.kotlin/move-to-market.html","searchKeys":["moveToMarket","inline fun <Error class: unknown class>.moveToMarket(destination: <Error class: unknown class>, alwaysAddToCommDirectory: Boolean): <Error class: unknown class>","org.magiclib.kotlin.moveToMarket"]},{"name":"inline fun <Error class: unknown class>.normalise(): <Error class: unknown class>","description":"org.magiclib.kotlin.normalise","location":"magiclib/org.magiclib.kotlin/normalise.html","searchKeys":["normalise","inline fun <Error class: unknown class>.normalise(): <Error class: unknown class>","org.magiclib.kotlin.normalise"]},{"name":"inline fun <Error class: unknown class>.optColor(key: String, defaultValue: Color?): <Error class: unknown class>","description":"org.magiclib.kotlin.optColor","location":"magiclib/org.magiclib.kotlin/opt-color.html","searchKeys":["optColor","inline fun <Error class: unknown class>.optColor(key: String, defaultValue: Color?): <Error class: unknown class>","org.magiclib.kotlin.optColor"]},{"name":"inline fun <Error class: unknown class>.playerHasEnough(quantity: Int): <Error class: unknown class>","description":"org.magiclib.kotlin.playerHasEnough","location":"magiclib/org.magiclib.kotlin/player-has-enough.html","searchKeys":["playerHasEnough","inline fun <Error class: unknown class>.playerHasEnough(quantity: Int): <Error class: unknown class>","org.magiclib.kotlin.playerHasEnough"]},{"name":"inline fun <Error class: unknown class>.playerHasStorageAccess(): <Error class: unknown class>","description":"org.magiclib.kotlin.playerHasStorageAccess","location":"magiclib/org.magiclib.kotlin/player-has-storage-access.html","searchKeys":["playerHasStorageAccess","inline fun <Error class: unknown class>.playerHasStorageAccess(): <Error class: unknown class>","org.magiclib.kotlin.playerHasStorageAccess"]},{"name":"inline fun <Error class: unknown class>.prepareModuleForRecovery(moduleSlotId: String, retainAllHullmods: Boolean, retainKnownHullmods: Boolean, clearSMods: Boolean, weaponRetainProb: Float, wingRetainProb: Float, salvageRandom: Random? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.prepareModuleForRecovery","location":"magiclib/org.magiclib.kotlin/prepare-module-for-recovery.html","searchKeys":["prepareModuleForRecovery","inline fun <Error class: unknown class>.prepareModuleForRecovery(moduleSlotId: String, retainAllHullmods: Boolean, retainKnownHullmods: Boolean, clearSMods: Boolean, weaponRetainProb: Float, wingRetainProb: Float, salvageRandom: Random? = null): <Error class: unknown class>","org.magiclib.kotlin.prepareModuleForRecovery"]},{"name":"inline fun <Error class: unknown class>.prepareShipForRecovery(retainAllHullmods: Boolean, retainKnownHullmods: Boolean, clearSMods: Boolean, weaponRetainProb: Float, wingRetainProb: Float, salvageRandom: Random? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.prepareShipForRecovery","location":"magiclib/org.magiclib.kotlin/prepare-ship-for-recovery.html","searchKeys":["prepareShipForRecovery","inline fun <Error class: unknown class>.prepareShipForRecovery(retainAllHullmods: Boolean, retainKnownHullmods: Boolean, clearSMods: Boolean, weaponRetainProb: Float, wingRetainProb: Float, salvageRandom: Random? = null): <Error class: unknown class>","org.magiclib.kotlin.prepareShipForRecovery"]},{"name":"inline fun <Error class: unknown class>.removeDefeatTrigger(trigger: String): <Error class: unknown class>","description":"org.magiclib.kotlin.removeDefeatTrigger","location":"magiclib/org.magiclib.kotlin/remove-defeat-trigger.html","searchKeys":["removeDefeatTrigger","inline fun <Error class: unknown class>.removeDefeatTrigger(trigger: String): <Error class: unknown class>","org.magiclib.kotlin.removeDefeatTrigger"]},{"name":"inline fun <Error class: unknown class>.removeRadioChatter(): <Error class: unknown class>","description":"org.magiclib.kotlin.removeRadioChatter","location":"magiclib/org.magiclib.kotlin/remove-radio-chatter.html","searchKeys":["removeRadioChatter","inline fun <Error class: unknown class>.removeRadioChatter(): <Error class: unknown class>","org.magiclib.kotlin.removeRadioChatter"]},{"name":"inline fun <Error class: unknown class>.rotateAroundOrigin(angle: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.rotateAroundOrigin","location":"magiclib/org.magiclib.kotlin/rotate-around-origin.html","searchKeys":["rotateAroundOrigin","inline fun <Error class: unknown class>.rotateAroundOrigin(angle: Float): <Error class: unknown class>","org.magiclib.kotlin.rotateAroundOrigin"]},{"name":"inline fun <Error class: unknown class>.rotateAroundOrigin(angle: Float, origin: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.rotateAroundOrigin","location":"magiclib/org.magiclib.kotlin/rotate-around-origin.html","searchKeys":["rotateAroundOrigin","inline fun <Error class: unknown class>.rotateAroundOrigin(angle: Float, origin: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.rotateAroundOrigin"]},{"name":"inline fun <Error class: unknown class>.setAbandonedStationMarket(marketId: String): <Error class: unknown class>","description":"org.magiclib.kotlin.setAbandonedStationMarket","location":"magiclib/org.magiclib.kotlin/set-abandoned-station-market.html","searchKeys":["setAbandonedStationMarket","inline fun <Error class: unknown class>.setAbandonedStationMarket(marketId: String): <Error class: unknown class>","org.magiclib.kotlin.setAbandonedStationMarket"]},{"name":"inline fun <Error class: unknown class>.setAllPlanetsKnown(): <Error class: unknown class>","description":"org.magiclib.kotlin.setAllPlanetsKnown","location":"magiclib/org.magiclib.kotlin/set-all-planets-known.html","searchKeys":["setAllPlanetsKnown","inline fun <Error class: unknown class>.setAllPlanetsKnown(): <Error class: unknown class>","org.magiclib.kotlin.setAllPlanetsKnown"]},{"name":"inline fun <Error class: unknown class>.setAllPlanetsSurveyed(setRuinsExplored: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.setAllPlanetsSurveyed","location":"magiclib/org.magiclib.kotlin/set-all-planets-surveyed.html","searchKeys":["setAllPlanetsSurveyed","inline fun <Error class: unknown class>.setAllPlanetsSurveyed(setRuinsExplored: Boolean): <Error class: unknown class>","org.magiclib.kotlin.setAllPlanetsSurveyed"]},{"name":"inline fun <Error class: unknown class>.setAsteroidSource(source: <Error class: unknown class>?): <Error class: unknown class>","description":"org.magiclib.kotlin.setAsteroidSource","location":"magiclib/org.magiclib.kotlin/set-asteroid-source.html","searchKeys":["setAsteroidSource","inline fun <Error class: unknown class>.setAsteroidSource(source: <Error class: unknown class>?): <Error class: unknown class>","org.magiclib.kotlin.setAsteroidSource"]},{"name":"inline fun <Error class: unknown class>.setDefenderOverride(override: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.setDefenderOverride","location":"magiclib/org.magiclib.kotlin/set-defender-override.html","searchKeys":["setDefenderOverride","inline fun <Error class: unknown class>.setDefenderOverride(override: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.setDefenderOverride"]},{"name":"inline fun <Error class: unknown class>.setFlagWithReason(flagKey: String, reason: String, value: Boolean, expire: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.setFlagWithReason","location":"magiclib/org.magiclib.kotlin/set-flag-with-reason.html","searchKeys":["setFlagWithReason","inline fun <Error class: unknown class>.setFlagWithReason(flagKey: String, reason: String, value: Boolean, expire: Float): <Error class: unknown class>","org.magiclib.kotlin.setFlagWithReason"]},{"name":"inline fun <Error class: unknown class>.setFullySurveyed(text: <Error class: unknown class>, withNotification: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.setFullySurveyed","location":"magiclib/org.magiclib.kotlin/set-fully-surveyed.html","searchKeys":["setFullySurveyed","inline fun <Error class: unknown class>.setFullySurveyed(text: <Error class: unknown class>, withNotification: Boolean): <Error class: unknown class>","org.magiclib.kotlin.setFullySurveyed"]},{"name":"inline fun <Error class: unknown class>.setMentored(mentored: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.setMentored","location":"magiclib/org.magiclib.kotlin/set-mentored.html","searchKeys":["setMentored","inline fun <Error class: unknown class>.setMentored(mentored: Boolean): <Error class: unknown class>","org.magiclib.kotlin.setMentored"]},{"name":"inline fun <Error class: unknown class>.setMercHiredNow(): <Error class: unknown class>","description":"org.magiclib.kotlin.setMercHiredNow","location":"magiclib/org.magiclib.kotlin/set-merc-hired-now.html","searchKeys":["setMercHiredNow","inline fun <Error class: unknown class>.setMercHiredNow(): <Error class: unknown class>","org.magiclib.kotlin.setMercHiredNow"]},{"name":"inline fun <Error class: unknown class>.setMercenary(mercenary: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.setMercenary","location":"magiclib/org.magiclib.kotlin/set-mercenary.html","searchKeys":["setMercenary","inline fun <Error class: unknown class>.setMercenary(mercenary: Boolean): <Error class: unknown class>","org.magiclib.kotlin.setMercenary"]},{"name":"inline fun <Error class: unknown class>.setPreliminarySurveyed(text: <Error class: unknown class>, withNotification: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.setPreliminarySurveyed","location":"magiclib/org.magiclib.kotlin/set-preliminary-surveyed.html","searchKeys":["setPreliminarySurveyed","inline fun <Error class: unknown class>.setPreliminarySurveyed(text: <Error class: unknown class>, withNotification: Boolean): <Error class: unknown class>","org.magiclib.kotlin.setPreliminarySurveyed"]},{"name":"inline fun <Error class: unknown class>.setPrevSalvageSpecial(data: Any?): <Error class: unknown class>","description":"org.magiclib.kotlin.setPrevSalvageSpecial","location":"magiclib/org.magiclib.kotlin/set-prev-salvage-special.html","searchKeys":["setPrevSalvageSpecial","inline fun <Error class: unknown class>.setPrevSalvageSpecial(data: Any?): <Error class: unknown class>","org.magiclib.kotlin.setPrevSalvageSpecial"]},{"name":"inline fun <Error class: unknown class>.setRaidedTimestamp(): <Error class: unknown class>","description":"org.magiclib.kotlin.setRaidedTimestamp","location":"magiclib/org.magiclib.kotlin/set-raided-timestamp.html","searchKeys":["setRaidedTimestamp","inline fun <Error class: unknown class>.setRaidedTimestamp(): <Error class: unknown class>","org.magiclib.kotlin.setRaidedTimestamp"]},{"name":"inline fun <Error class: unknown class>.setSalvageSpecial(data: Any?): <Error class: unknown class>","description":"org.magiclib.kotlin.setSalvageSpecial","location":"magiclib/org.magiclib.kotlin/set-salvage-special.html","searchKeys":["setSalvageSpecial","inline fun <Error class: unknown class>.setSalvageSpecial(data: Any?): <Error class: unknown class>","org.magiclib.kotlin.setSalvageSpecial"]},{"name":"inline fun <Error class: unknown class>.setSeen(text: <Error class: unknown class>, withNotification: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.setSeen","location":"magiclib/org.magiclib.kotlin/set-seen.html","searchKeys":["setSeen","inline fun <Error class: unknown class>.setSeen(text: <Error class: unknown class>, withNotification: Boolean): <Error class: unknown class>","org.magiclib.kotlin.setSeen"]},{"name":"inline fun <Error class: unknown class>.setSpawnFPMult(mult: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.setSpawnFPMult","location":"magiclib/org.magiclib.kotlin/set-spawn-f-p-mult.html","searchKeys":["setSpawnFPMult","inline fun <Error class: unknown class>.setSpawnFPMult(mult: Float): <Error class: unknown class>","org.magiclib.kotlin.setSpawnFPMult"]},{"name":"inline fun <Error class: unknown class>.setUnremovable(unremovable: Boolean): <Error class: unknown class>","description":"org.magiclib.kotlin.setUnremovable","location":"magiclib/org.magiclib.kotlin/set-unremovable.html","searchKeys":["setUnremovable","inline fun <Error class: unknown class>.setUnremovable(unremovable: Boolean): <Error class: unknown class>","org.magiclib.kotlin.setUnremovable"]},{"name":"inline fun <Error class: unknown class>.setWarningBeaconColors(color: Color, ping: Color): <Error class: unknown class>","description":"org.magiclib.kotlin.setWarningBeaconColors","location":"magiclib/org.magiclib.kotlin/set-warning-beacon-colors.html","searchKeys":["setWarningBeaconColors","inline fun <Error class: unknown class>.setWarningBeaconColors(color: Color, ping: Color): <Error class: unknown class>","org.magiclib.kotlin.setWarningBeaconColors"]},{"name":"inline fun <Error class: unknown class>.setWarningBeaconGlowColor(color: Color): <Error class: unknown class>","description":"org.magiclib.kotlin.setWarningBeaconGlowColor","location":"magiclib/org.magiclib.kotlin/set-warning-beacon-glow-color.html","searchKeys":["setWarningBeaconGlowColor","inline fun <Error class: unknown class>.setWarningBeaconGlowColor(color: Color): <Error class: unknown class>","org.magiclib.kotlin.setWarningBeaconGlowColor"]},{"name":"inline fun <Error class: unknown class>.setWarningBeaconPingColor(color: Color): <Error class: unknown class>","description":"org.magiclib.kotlin.setWarningBeaconPingColor","location":"magiclib/org.magiclib.kotlin/set-warning-beacon-ping-color.html","searchKeys":["setWarningBeaconPingColor","inline fun <Error class: unknown class>.setWarningBeaconPingColor(color: Color): <Error class: unknown class>","org.magiclib.kotlin.setWarningBeaconPingColor"]},{"name":"inline fun <Error class: unknown class>.shouldConvertFromStub(location: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.shouldConvertFromStub","location":"magiclib/org.magiclib.kotlin/should-convert-from-stub.html","searchKeys":["shouldConvertFromStub","inline fun <Error class: unknown class>.shouldConvertFromStub(location: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.shouldConvertFromStub"]},{"name":"inline fun <Error class: unknown class>.shouldNotWantRunFromPlayerEvenIfWeaker(): <Error class: unknown class>","description":"org.magiclib.kotlin.shouldNotWantRunFromPlayerEvenIfWeaker","location":"magiclib/org.magiclib.kotlin/should-not-want-run-from-player-even-if-weaker.html","searchKeys":["shouldNotWantRunFromPlayerEvenIfWeaker","inline fun <Error class: unknown class>.shouldNotWantRunFromPlayerEvenIfWeaker(): <Error class: unknown class>","org.magiclib.kotlin.shouldNotWantRunFromPlayerEvenIfWeaker"]},{"name":"inline fun <Error class: unknown class>.shouldShowDamageFloaty(target: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.shouldShowDamageFloaty","location":"magiclib/org.magiclib.kotlin/should-show-damage-floaty.html","searchKeys":["shouldShowDamageFloaty","inline fun <Error class: unknown class>.shouldShowDamageFloaty(target: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.shouldShowDamageFloaty"]},{"name":"inline fun <Error class: unknown class>.showCost(title: String = \"Resources: consumed (available)\", withAvailable: Boolean = true, widthOverride: Float = -1f, color: Color, dark: Color, res: Array<String>, quantities: IntArray, consumed: BooleanArray? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.showCost","location":"magiclib/org.magiclib.kotlin/show-cost.html","searchKeys":["showCost","inline fun <Error class: unknown class>.showCost(title: String = \"Resources: consumed (available)\", withAvailable: Boolean = true, widthOverride: Float = -1f, color: Color, dark: Color, res: Array<String>, quantities: IntArray, consumed: BooleanArray? = null): <Error class: unknown class>","org.magiclib.kotlin.showCost"]},{"name":"inline fun <Error class: unknown class>.showRuleDialog(initialTrigger: String): <Error class: unknown class>","description":"org.magiclib.kotlin.showRuleDialog","location":"magiclib/org.magiclib.kotlin/show-rule-dialog.html","searchKeys":["showRuleDialog","inline fun <Error class: unknown class>.showRuleDialog(initialTrigger: String): <Error class: unknown class>","org.magiclib.kotlin.showRuleDialog"]},{"name":"inline fun <Error class: unknown class>.startEvent(eventId: String, params: Any): <Error class: unknown class>","description":"org.magiclib.kotlin.startEvent","location":"magiclib/org.magiclib.kotlin/start-event.html","searchKeys":["startEvent","inline fun <Error class: unknown class>.startEvent(eventId: String, params: Any): <Error class: unknown class>","org.magiclib.kotlin.startEvent"]},{"name":"inline fun <Error class: unknown class>.systemHasPlanets(): <Error class: unknown class>","description":"org.magiclib.kotlin.systemHasPlanets","location":"magiclib/org.magiclib.kotlin/system-has-planets.html","searchKeys":["systemHasPlanets","inline fun <Error class: unknown class>.systemHasPlanets(): <Error class: unknown class>","org.magiclib.kotlin.systemHasPlanets"]},{"name":"inline fun <Error class: unknown class>.unsetAll(prefix: String, memKey: String): <Error class: unknown class>","description":"org.magiclib.kotlin.unsetAll","location":"magiclib/org.magiclib.kotlin/unset-all.html","searchKeys":["unsetAll","inline fun <Error class: unknown class>.unsetAll(prefix: String, memKey: String): <Error class: unknown class>","org.magiclib.kotlin.unsetAll"]},{"name":"inline fun <Error class: unknown class>.wiggle(max: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.wiggle","location":"magiclib/org.magiclib.kotlin/wiggle.html","searchKeys":["wiggle","inline fun <Error class: unknown class>.wiggle(max: Float): <Error class: unknown class>","org.magiclib.kotlin.wiggle"]},{"name":"inline fun <Error class: unknown class>?.findClosestShipEnemyOf(locFromForSorting: <Error class: unknown class>, smallestToNote: <Error class: unknown class>, maxRange: Float, considerShipRadius: Boolean, filter: <Error class: unknown class>? = null): <Error class: unknown class>","description":"org.magiclib.kotlin.findClosestShipEnemyOf","location":"magiclib/org.magiclib.kotlin/find-closest-ship-enemy-of.html","searchKeys":["findClosestShipEnemyOf","inline fun <Error class: unknown class>?.findClosestShipEnemyOf(locFromForSorting: <Error class: unknown class>, smallestToNote: <Error class: unknown class>, maxRange: Float, considerShipRadius: Boolean, filter: <Error class: unknown class>? = null): <Error class: unknown class>","org.magiclib.kotlin.findClosestShipEnemyOf"]},{"name":"inline fun <Error class: unknown class>?.hasPulsar(): <Error class: unknown class>","description":"org.magiclib.kotlin.hasPulsar","location":"magiclib/org.magiclib.kotlin/has-pulsar.html","searchKeys":["hasPulsar","inline fun <Error class: unknown class>?.hasPulsar(): <Error class: unknown class>","org.magiclib.kotlin.hasPulsar"]},{"name":"inline fun <T : Enum<T>> <Error class: unknown class>.mapToEnum(key: String, enumType: Class<T>, defaultOption: T, required: Boolean = true): <Error class: unknown class>","description":"org.magiclib.kotlin.mapToEnum","location":"magiclib/org.magiclib.kotlin/map-to-enum.html","searchKeys":["mapToEnum","inline fun <T : Enum<T>> <Error class: unknown class>.mapToEnum(key: String, enumType: Class<T>, defaultOption: T, required: Boolean = true): <Error class: unknown class>","org.magiclib.kotlin.mapToEnum"]},{"name":"inline fun <T, K> <Error class: unknown class>.map(transform: (<Error class: unknown class>, Int) -> T = { json, i -> getJsonObjFromArray(json, i) }, action: (T) -> K): List<K>","description":"org.magiclib.kotlin.map","location":"magiclib/org.magiclib.kotlin/map.html","searchKeys":["map","inline fun <T, K> <Error class: unknown class>.map(transform: (<Error class: unknown class>, Int) -> T = { json, i -> getJsonObjFromArray(json, i) }, action: (T) -> K): List<K>","org.magiclib.kotlin.map"]},{"name":"inline fun <T> <Error class: unknown class>.filter(transform: (<Error class: unknown class>, Int) -> T = { json, i -> getJsonObjFromArray(json, i) }, predicate: (T) -> Boolean): List<T>","description":"org.magiclib.kotlin.filter","location":"magiclib/org.magiclib.kotlin/filter.html","searchKeys":["filter","inline fun <T> <Error class: unknown class>.filter(transform: (<Error class: unknown class>, Int) -> T = { json, i -> getJsonObjFromArray(json, i) }, predicate: (T) -> Boolean): List<T>","org.magiclib.kotlin.filter"]},{"name":"inline fun <T> <Error class: unknown class>.forEach(transform: (<Error class: unknown class>, Int) -> T = { json, i -> getJsonObjFromArray(json, i) }, action: (T) -> Unit)","description":"org.magiclib.kotlin.forEach","location":"magiclib/org.magiclib.kotlin/for-each.html","searchKeys":["forEach","inline fun <T> <Error class: unknown class>.forEach(transform: (<Error class: unknown class>, Int) -> T = { json, i -> getJsonObjFromArray(json, i) }, action: (T) -> Unit)","org.magiclib.kotlin.forEach"]},{"name":"inline fun <T> <Error class: unknown class>.getObj(key: String): T","description":"org.magiclib.kotlin.getObj","location":"magiclib/org.magiclib.kotlin/get-obj.html","searchKeys":["getObj","inline fun <T> <Error class: unknown class>.getObj(key: String): T","org.magiclib.kotlin.getObj"]},{"name":"inline fun <T> <Error class: unknown class>.optional(key: String, default: () -> T? = { null }): T?","description":"org.magiclib.kotlin.optional","location":"magiclib/org.magiclib.kotlin/optional.html","searchKeys":["optional","inline fun <T> <Error class: unknown class>.optional(key: String, default: () -> T? = { null }): T?","org.magiclib.kotlin.optional"]},{"name":"inline fun <T> <Error class: unknown class>.tryGet(key: String, default: () -> T): T","description":"org.magiclib.kotlin.tryGet","location":"magiclib/org.magiclib.kotlin/try-get.html","searchKeys":["tryGet","inline fun <T> <Error class: unknown class>.tryGet(key: String, default: () -> T): T","org.magiclib.kotlin.tryGet"]},{"name":"inline fun <T> getJsonObj(json: <Error class: unknown class>, key: String): T","description":"org.magiclib.kotlin.getJsonObj","location":"magiclib/org.magiclib.kotlin/get-json-obj.html","searchKeys":["getJsonObj","inline fun <T> getJsonObj(json: <Error class: unknown class>, key: String): T","org.magiclib.kotlin.getJsonObj"]},{"name":"inline fun <T> getJsonObjFromArray(json: <Error class: unknown class>, i: Int): T","description":"org.magiclib.kotlin.getJsonObjFromArray","location":"magiclib/org.magiclib.kotlin/get-json-obj-from-array.html","searchKeys":["getJsonObjFromArray","inline fun <T> getJsonObjFromArray(json: <Error class: unknown class>, i: Int): T","org.magiclib.kotlin.getJsonObjFromArray"]},{"name":"inline fun <T> trace(onlyRunTraceInDevMode: Boolean = true, func: () -> T): T","description":"org.magiclib.kotlin.trace","location":"magiclib/org.magiclib.kotlin/trace.html","searchKeys":["trace","inline fun <T> trace(onlyRunTraceInDevMode: Boolean = true, func: () -> T): T","org.magiclib.kotlin.trace"]},{"name":"inline fun <T> trace(onlyRunTraceInDevMode: Boolean = true, onFinished: (result: T, millis: Long) -> Unit, func: () -> T): T","description":"org.magiclib.kotlin.trace","location":"magiclib/org.magiclib.kotlin/trace.html","searchKeys":["trace","inline fun <T> trace(onlyRunTraceInDevMode: Boolean = true, onFinished: (result: T, millis: Long) -> Unit, func: () -> T): T","org.magiclib.kotlin.trace"]},{"name":"inline fun Buffer.cleanBuffer(): <Error class: unknown class>","description":"org.magiclib.kotlin.cleanBuffer","location":"magiclib/org.magiclib.kotlin/clean-buffer.html","searchKeys":["cleanBuffer","inline fun Buffer.cleanBuffer(): <Error class: unknown class>","org.magiclib.kotlin.cleanBuffer"]},{"name":"inline fun Collection<String>.hasAtLeastOneOfTags(vararg other: String): <Error class: unknown class>","description":"org.magiclib.kotlin.hasAtLeastOneOfTags","location":"magiclib/org.magiclib.kotlin/has-at-least-one-of-tags.html","searchKeys":["hasAtLeastOneOfTags","inline fun Collection<String>.hasAtLeastOneOfTags(vararg other: String): <Error class: unknown class>","org.magiclib.kotlin.hasAtLeastOneOfTags"]},{"name":"inline fun Color.interpolateColor(to: Color, progress: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.interpolateColor","location":"magiclib/org.magiclib.kotlin/interpolate-color.html","searchKeys":["interpolateColor","inline fun Color.interpolateColor(to: Color, progress: Float): <Error class: unknown class>","org.magiclib.kotlin.interpolateColor"]},{"name":"inline fun Color.modify(red: Int = this.red, green: Int = this.green, blue: Int = this.blue, alpha: Int = this.alpha): Color","description":"org.magiclib.kotlin.modify","location":"magiclib/org.magiclib.kotlin/modify.html","searchKeys":["modify","inline fun Color.modify(red: Int = this.red, green: Int = this.green, blue: Int = this.blue, alpha: Int = this.alpha): Color","org.magiclib.kotlin.modify"]},{"name":"inline fun Color.scaleAlpha(factor: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.scaleAlpha","location":"magiclib/org.magiclib.kotlin/scale-alpha.html","searchKeys":["scaleAlpha","inline fun Color.scaleAlpha(factor: Float): <Error class: unknown class>","org.magiclib.kotlin.scaleAlpha"]},{"name":"inline fun Color.scaleColor(factor: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.scaleColor","location":"magiclib/org.magiclib.kotlin/scale-color.html","searchKeys":["scaleColor","inline fun Color.scaleColor(factor: Float): <Error class: unknown class>","org.magiclib.kotlin.scaleColor"]},{"name":"inline fun Color.scaleColorOnly(factor: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.scaleColorOnly","location":"magiclib/org.magiclib.kotlin/scale-color-only.html","searchKeys":["scaleColorOnly","inline fun Color.scaleColorOnly(factor: Float): <Error class: unknown class>","org.magiclib.kotlin.scaleColorOnly"]},{"name":"inline fun Color.scaleColorSaturate(factor: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.scaleColorSaturate","location":"magiclib/org.magiclib.kotlin/scale-color-saturate.html","searchKeys":["scaleColorSaturate","inline fun Color.scaleColorSaturate(factor: Float): <Error class: unknown class>","org.magiclib.kotlin.scaleColorSaturate"]},{"name":"inline fun Color.setAlpha(alpha: Int): <Error class: unknown class>","description":"org.magiclib.kotlin.setAlpha","location":"magiclib/org.magiclib.kotlin/set-alpha.html","searchKeys":["setAlpha","inline fun Color.setAlpha(alpha: Int): <Error class: unknown class>","org.magiclib.kotlin.setAlpha"]},{"name":"inline fun Color.setBrightness(brightness: Int): <Error class: unknown class>","description":"org.magiclib.kotlin.setBrightness","location":"magiclib/org.magiclib.kotlin/set-brightness.html","searchKeys":["setBrightness","inline fun Color.setBrightness(brightness: Int): <Error class: unknown class>","org.magiclib.kotlin.setBrightness"]},{"name":"inline fun Float.getAdjustedBaseRange(ship: <Error class: unknown class>, weapon: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getAdjustedBaseRange","location":"magiclib/org.magiclib.kotlin/get-adjusted-base-range.html","searchKeys":["getAdjustedBaseRange","inline fun Float.getAdjustedBaseRange(ship: <Error class: unknown class>, weapon: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getAdjustedBaseRange"]},{"name":"inline fun Float.getAdjustedFP(market: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getAdjustedFP","location":"magiclib/org.magiclib.kotlin/get-adjusted-f-p.html","searchKeys":["getAdjustedFP","inline fun Float.getAdjustedFP(market: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getAdjustedFP"]},{"name":"inline fun Float.getAdjustedStrengthFromFp(market: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getAdjustedStrengthFromFp","location":"magiclib/org.magiclib.kotlin/get-adjusted-strength-from-fp.html","searchKeys":["getAdjustedStrengthFromFp","inline fun Float.getAdjustedStrengthFromFp(market: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getAdjustedStrengthFromFp"]},{"name":"inline fun Float.getAngleDiff(to: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.getAngleDiff","location":"magiclib/org.magiclib.kotlin/get-angle-diff.html","searchKeys":["getAngleDiff","inline fun Float.getAngleDiff(to: Float): <Error class: unknown class>","org.magiclib.kotlin.getAngleDiff"]},{"name":"inline fun Float.getBurnLevelForSpeed(): <Error class: unknown class>","description":"org.magiclib.kotlin.getBurnLevelForSpeed","location":"magiclib/org.magiclib.kotlin/get-burn-level-for-speed.html","searchKeys":["getBurnLevelForSpeed","inline fun Float.getBurnLevelForSpeed(): <Error class: unknown class>","org.magiclib.kotlin.getBurnLevelForSpeed"]},{"name":"inline fun Float.getDGSCredits(): <Error class: unknown class>","description":"org.magiclib.kotlin.getDGSCredits","location":"magiclib/org.magiclib.kotlin/get-d-g-s-credits.html","searchKeys":["getDGSCredits","inline fun Float.getDGSCredits(): <Error class: unknown class>","org.magiclib.kotlin.getDGSCredits"]},{"name":"inline fun Float.getDays(): <Error class: unknown class>","description":"org.magiclib.kotlin.getDays","location":"magiclib/org.magiclib.kotlin/get-days.html","searchKeys":["getDays","inline fun Float.getDays(): <Error class: unknown class>","org.magiclib.kotlin.getDays"]},{"name":"inline fun Float.getFractionalBurnLevelForSpeed(): <Error class: unknown class>","description":"org.magiclib.kotlin.getFractionalBurnLevelForSpeed","location":"magiclib/org.magiclib.kotlin/get-fractional-burn-level-for-speed.html","searchKeys":["getFractionalBurnLevelForSpeed","inline fun Float.getFractionalBurnLevelForSpeed(): <Error class: unknown class>","org.magiclib.kotlin.getFractionalBurnLevelForSpeed"]},{"name":"inline fun Float.getRelColor(): <Error class: unknown class>","description":"org.magiclib.kotlin.getRelColor","location":"magiclib/org.magiclib.kotlin/get-rel-color.html","searchKeys":["getRelColor","inline fun Float.getRelColor(): <Error class: unknown class>","org.magiclib.kotlin.getRelColor"]},{"name":"inline fun Float.getRounded(): <Error class: unknown class>","description":"org.magiclib.kotlin.getRounded","location":"magiclib/org.magiclib.kotlin/get-rounded.html","searchKeys":["getRounded","inline fun Float.getRounded(): <Error class: unknown class>","org.magiclib.kotlin.getRounded"]},{"name":"inline fun Float.getRoundedValue(): <Error class: unknown class>","description":"org.magiclib.kotlin.getRoundedValue","location":"magiclib/org.magiclib.kotlin/get-rounded-value.html","searchKeys":["getRoundedValue","inline fun Float.getRoundedValue(): <Error class: unknown class>","org.magiclib.kotlin.getRoundedValue"]},{"name":"inline fun Float.getRoundedValueFloat(): <Error class: unknown class>","description":"org.magiclib.kotlin.getRoundedValueFloat","location":"magiclib/org.magiclib.kotlin/get-rounded-value-float.html","searchKeys":["getRoundedValueFloat","inline fun Float.getRoundedValueFloat(): <Error class: unknown class>","org.magiclib.kotlin.getRoundedValueFloat"]},{"name":"inline fun Float.getRoundedValueMaxOneAfterDecimal(): <Error class: unknown class>","description":"org.magiclib.kotlin.getRoundedValueMaxOneAfterDecimal","location":"magiclib/org.magiclib.kotlin/get-rounded-value-max-one-after-decimal.html","searchKeys":["getRoundedValueMaxOneAfterDecimal","inline fun Float.getRoundedValueMaxOneAfterDecimal(): <Error class: unknown class>","org.magiclib.kotlin.getRoundedValueMaxOneAfterDecimal"]},{"name":"inline fun Float.getSpeedForBurnLevel(): <Error class: unknown class>","description":"org.magiclib.kotlin.getSpeedForBurnLevel","location":"magiclib/org.magiclib.kotlin/get-speed-for-burn-level.html","searchKeys":["getSpeedForBurnLevel","inline fun Float.getSpeedForBurnLevel(): <Error class: unknown class>","org.magiclib.kotlin.getSpeedForBurnLevel"]},{"name":"inline fun Float.getStrengthDescForFP(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStrengthDescForFP","location":"magiclib/org.magiclib.kotlin/get-strength-desc-for-f-p.html","searchKeys":["getStrengthDescForFP","inline fun Float.getStrengthDescForFP(): <Error class: unknown class>","org.magiclib.kotlin.getStrengthDescForFP"]},{"name":"inline fun Float.getUnitVectorAtDegreeAngle(): <Error class: unknown class>","description":"org.magiclib.kotlin.getUnitVectorAtDegreeAngle","location":"magiclib/org.magiclib.kotlin/get-unit-vector-at-degree-angle.html","searchKeys":["getUnitVectorAtDegreeAngle","inline fun Float.getUnitVectorAtDegreeAngle(): <Error class: unknown class>","org.magiclib.kotlin.getUnitVectorAtDegreeAngle"]},{"name":"inline fun Float.getWithDGS(): <Error class: unknown class>","description":"org.magiclib.kotlin.getWithDGS","location":"magiclib/org.magiclib.kotlin/get-with-d-g-s.html","searchKeys":["getWithDGS","inline fun Float.getWithDGS(): <Error class: unknown class>","org.magiclib.kotlin.getWithDGS"]},{"name":"inline fun Float.interpolate(to: Float, progress: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.interpolate","location":"magiclib/org.magiclib.kotlin/interpolate.html","searchKeys":["interpolate","inline fun Float.interpolate(to: Float, progress: Float): <Error class: unknown class>","org.magiclib.kotlin.interpolate"]},{"name":"inline fun Float.isBetween(two: Float, check: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.isBetween","location":"magiclib/org.magiclib.kotlin/is-between.html","searchKeys":["isBetween","inline fun Float.isBetween(two: Float, check: Float): <Error class: unknown class>","org.magiclib.kotlin.isBetween"]},{"name":"inline fun Float.logOfBase(num: Float): <Error class: unknown class>","description":"org.magiclib.kotlin.logOfBase","location":"magiclib/org.magiclib.kotlin/log-of-base.html","searchKeys":["logOfBase","inline fun Float.logOfBase(num: Float): <Error class: unknown class>","org.magiclib.kotlin.logOfBase"]},{"name":"inline fun Float.normalizeAngle(): <Error class: unknown class>","description":"org.magiclib.kotlin.normalizeAngle","location":"magiclib/org.magiclib.kotlin/normalize-angle.html","searchKeys":["normalizeAngle","inline fun Float.normalizeAngle(): <Error class: unknown class>","org.magiclib.kotlin.normalizeAngle"]},{"name":"inline fun FloatArray.findKth(k: Int): <Error class: unknown class>","description":"org.magiclib.kotlin.findKth","location":"magiclib/org.magiclib.kotlin/find-kth.html","searchKeys":["findKth","inline fun FloatArray.findKth(k: Int): <Error class: unknown class>","org.magiclib.kotlin.findKth"]},{"name":"inline fun Int.getAtLeastStringForDays(): <Error class: unknown class>","description":"org.magiclib.kotlin.getAtLeastStringForDays","location":"magiclib/org.magiclib.kotlin/get-at-least-string-for-days.html","searchKeys":["getAtLeastStringForDays","inline fun Int.getAtLeastStringForDays(): <Error class: unknown class>","org.magiclib.kotlin.getAtLeastStringForDays"]},{"name":"inline fun Int.getStringForDays(): <Error class: unknown class>","description":"org.magiclib.kotlin.getStringForDays","location":"magiclib/org.magiclib.kotlin/get-string-for-days.html","searchKeys":["getStringForDays","inline fun Int.getStringForDays(): <Error class: unknown class>","org.magiclib.kotlin.getStringForDays"]},{"name":"inline fun List<Color>.colorsToString(): <Error class: unknown class>","description":"org.magiclib.kotlin.colorsToString","location":"magiclib/org.magiclib.kotlin/colors-to-string.html","searchKeys":["colorsToString","inline fun List<Color>.colorsToString(): <Error class: unknown class>","org.magiclib.kotlin.colorsToString"]},{"name":"inline fun Long.getAgoStringForTimestamp(): <Error class: unknown class>","description":"org.magiclib.kotlin.getAgoStringForTimestamp","location":"magiclib/org.magiclib.kotlin/get-ago-string-for-timestamp.html","searchKeys":["getAgoStringForTimestamp","inline fun Long.getAgoStringForTimestamp(): <Error class: unknown class>","org.magiclib.kotlin.getAgoStringForTimestamp"]},{"name":"inline fun Long.getDetailedAgoString(): <Error class: unknown class>","description":"org.magiclib.kotlin.getDetailedAgoString","location":"magiclib/org.magiclib.kotlin/get-detailed-ago-string.html","searchKeys":["getDetailedAgoString","inline fun Long.getDetailedAgoString(): <Error class: unknown class>","org.magiclib.kotlin.getDetailedAgoString"]},{"name":"inline fun String.colorsFromString(): <Error class: unknown class>","description":"org.magiclib.kotlin.colorsFromString","location":"magiclib/org.magiclib.kotlin/colors-from-string.html","searchKeys":["colorsFromString","inline fun String.colorsFromString(): <Error class: unknown class>","org.magiclib.kotlin.colorsFromString"]},{"name":"inline fun String.getAOrAnForWord(): <Error class: unknown class>","description":"org.magiclib.kotlin.getAOrAnForWord","location":"magiclib/org.magiclib.kotlin/get-a-or-an-for-word.html","searchKeys":["getAOrAnForWord","inline fun String.getAOrAnForWord(): <Error class: unknown class>","org.magiclib.kotlin.getAOrAnForWord"]},{"name":"inline fun String.getAndJoined(strings: List<String>): <Error class: unknown class>","description":"org.magiclib.kotlin.getAndJoined","location":"magiclib/org.magiclib.kotlin/get-and-joined.html","searchKeys":["getAndJoined","inline fun String.getAndJoined(strings: List<String>): <Error class: unknown class>","org.magiclib.kotlin.getAndJoined"]},{"name":"inline fun String.getAndJoined(vararg strings: String): <Error class: unknown class>","description":"org.magiclib.kotlin.getAndJoined","location":"magiclib/org.magiclib.kotlin/get-and-joined.html","searchKeys":["getAndJoined","inline fun String.getAndJoined(vararg strings: String): <Error class: unknown class>","org.magiclib.kotlin.getAndJoined"]},{"name":"inline fun String.getFPForVariantId(): <Error class: unknown class>","description":"org.magiclib.kotlin.getFPForVariantId","location":"magiclib/org.magiclib.kotlin/get-f-p-for-variant-id.html","searchKeys":["getFPForVariantId","inline fun String.getFPForVariantId(): <Error class: unknown class>","org.magiclib.kotlin.getFPForVariantId"]},{"name":"inline fun String.getHullIdForVariantId(): <Error class: unknown class>","description":"org.magiclib.kotlin.getHullIdForVariantId","location":"magiclib/org.magiclib.kotlin/get-hull-id-for-variant-id.html","searchKeys":["getHullIdForVariantId","inline fun String.getHullIdForVariantId(): <Error class: unknown class>","org.magiclib.kotlin.getHullIdForVariantId"]},{"name":"inline fun String.getJoined(joiner: String, strings: List<String>): <Error class: unknown class>","description":"org.magiclib.kotlin.getJoined","location":"magiclib/org.magiclib.kotlin/get-joined.html","searchKeys":["getJoined","inline fun String.getJoined(joiner: String, strings: List<String>): <Error class: unknown class>","org.magiclib.kotlin.getJoined"]},{"name":"inline fun String.getJoined(joiner: String, vararg strings: String): <Error class: unknown class>","description":"org.magiclib.kotlin.getJoined","location":"magiclib/org.magiclib.kotlin/get-joined.html","searchKeys":["getJoined","inline fun String.getJoined(joiner: String, vararg strings: String): <Error class: unknown class>","org.magiclib.kotlin.getJoined"]},{"name":"inline fun String.getStringWithTokenReplacement(entity: <Error class: unknown class>, memoryMap: Map<String, <Error class: unknown class>>?): <Error class: unknown class>","description":"org.magiclib.kotlin.getStringWithTokenReplacement","location":"magiclib/org.magiclib.kotlin/get-string-with-token-replacement.html","searchKeys":["getStringWithTokenReplacement","inline fun String.getStringWithTokenReplacement(entity: <Error class: unknown class>, memoryMap: Map<String, <Error class: unknown class>>?): <Error class: unknown class>","org.magiclib.kotlin.getStringWithTokenReplacement"]},{"name":"inline fun String.getTokenReplaced(entity: <Error class: unknown class>): <Error class: unknown class>","description":"org.magiclib.kotlin.getTokenReplaced","location":"magiclib/org.magiclib.kotlin/get-token-replaced.html","searchKeys":["getTokenReplaced","inline fun String.getTokenReplaced(entity: <Error class: unknown class>): <Error class: unknown class>","org.magiclib.kotlin.getTokenReplaced"]},{"name":"inline fun String.lcFirst(): <Error class: unknown class>","description":"org.magiclib.kotlin.lcFirst","location":"magiclib/org.magiclib.kotlin/lc-first.html","searchKeys":["lcFirst","inline fun String.lcFirst(): <Error class: unknown class>","org.magiclib.kotlin.lcFirst"]},{"name":"inline fun String.replaceTokensFromMemory(memoryMap: Map<String, <Error class: unknown class>>): <Error class: unknown class>","description":"org.magiclib.kotlin.replaceTokensFromMemory","location":"magiclib/org.magiclib.kotlin/replace-tokens-from-memory.html","searchKeys":["replaceTokensFromMemory","inline fun String.replaceTokensFromMemory(memoryMap: Map<String, <Error class: unknown class>>): <Error class: unknown class>","org.magiclib.kotlin.replaceTokensFromMemory"]},{"name":"inline fun String.ucFirst(): <Error class: unknown class>","description":"org.magiclib.kotlin.ucFirst","location":"magiclib/org.magiclib.kotlin/uc-first.html","searchKeys":["ucFirst","inline fun String.ucFirst(): <Error class: unknown class>","org.magiclib.kotlin.ucFirst"]},{"name":"object MagicKotlinModPlugin","description":"org.magiclib.kotlin.MagicKotlinModPlugin","location":"magiclib/org.magiclib.kotlin/-magic-kotlin-mod-plugin/index.html","searchKeys":["MagicKotlinModPlugin","object MagicKotlinModPlugin","org.magiclib.kotlin.MagicKotlinModPlugin"]},{"name":"val <Error class: unknown class>.ZERO: <Error class: unknown class>","description":"org.magiclib.kotlin.ZERO","location":"magiclib/org.magiclib.kotlin/-z-e-r-o.html","searchKeys":["ZERO","val <Error class: unknown class>.ZERO: <Error class: unknown class>","org.magiclib.kotlin.ZERO"]}]
